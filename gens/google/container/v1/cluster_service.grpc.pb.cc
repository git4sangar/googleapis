// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/container/v1/cluster_service.proto

#include "google/container/v1/cluster_service.pb.h"
#include "google/container/v1/cluster_service.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace google {
namespace container {
namespace v1 {

static const char* ClusterManager_method_names[] = {
  "/google.container.v1.ClusterManager/ListClusters",
  "/google.container.v1.ClusterManager/GetCluster",
  "/google.container.v1.ClusterManager/CreateCluster",
  "/google.container.v1.ClusterManager/UpdateCluster",
  "/google.container.v1.ClusterManager/DeleteCluster",
  "/google.container.v1.ClusterManager/ListOperations",
  "/google.container.v1.ClusterManager/GetOperation",
  "/google.container.v1.ClusterManager/CancelOperation",
  "/google.container.v1.ClusterManager/GetServerConfig",
  "/google.container.v1.ClusterManager/ListNodePools",
  "/google.container.v1.ClusterManager/GetNodePool",
  "/google.container.v1.ClusterManager/CreateNodePool",
  "/google.container.v1.ClusterManager/DeleteNodePool",
  "/google.container.v1.ClusterManager/RollbackNodePoolUpgrade",
  "/google.container.v1.ClusterManager/SetNodePoolManagement",
};

std::unique_ptr< ClusterManager::Stub> ClusterManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< ClusterManager::Stub> stub(new ClusterManager::Stub(channel));
  return stub;
}

ClusterManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListClusters_(ClusterManager_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCluster_(ClusterManager_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCluster_(ClusterManager_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCluster_(ClusterManager_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCluster_(ClusterManager_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListOperations_(ClusterManager_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOperation_(ClusterManager_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOperation_(ClusterManager_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServerConfig_(ClusterManager_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNodePools_(ClusterManager_method_names[9], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNodePool_(ClusterManager_method_names[10], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateNodePool_(ClusterManager_method_names[11], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNodePool_(ClusterManager_method_names[12], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RollbackNodePoolUpgrade_(ClusterManager_method_names[13], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNodePoolManagement_(ClusterManager_method_names[14], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClusterManager::Stub::ListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::google::container::v1::ListClustersResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListClusters_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::ListClustersResponse>* ClusterManager::Stub::AsyncListClustersRaw(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListClustersResponse>(channel_.get(), cq, rpcmethod_ListClusters_, context, request);
}

::grpc::Status ClusterManager::Stub::GetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::google::container::v1::Cluster* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Cluster>* ClusterManager::Stub::AsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::container::v1::Cluster>(channel_.get(), cq, rpcmethod_GetCluster_, context, request);
}

::grpc::Status ClusterManager::Stub::CreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>(channel_.get(), cq, rpcmethod_CreateCluster_, context, request);
}

::grpc::Status ClusterManager::Stub::UpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>(channel_.get(), cq, rpcmethod_UpdateCluster_, context, request);
}

::grpc::Status ClusterManager::Stub::DeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>(channel_.get(), cq, rpcmethod_DeleteCluster_, context, request);
}

::grpc::Status ClusterManager::Stub::ListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::google::container::v1::ListOperationsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListOperations_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::ListOperationsResponse>* ClusterManager::Stub::AsyncListOperationsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListOperationsResponse>(channel_.get(), cq, rpcmethod_ListOperations_, context, request);
}

::grpc::Status ClusterManager::Stub::GetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetOperation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncGetOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>(channel_.get(), cq, rpcmethod_GetOperation_, context, request);
}

::grpc::Status ClusterManager::Stub::CancelOperation(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CancelOperation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ClusterManager::Stub::AsyncCancelOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>(channel_.get(), cq, rpcmethod_CancelOperation_, context, request);
}

::grpc::Status ClusterManager::Stub::GetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::google::container::v1::ServerConfig* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetServerConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::ServerConfig>* ClusterManager::Stub::AsyncGetServerConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::container::v1::ServerConfig>(channel_.get(), cq, rpcmethod_GetServerConfig_, context, request);
}

::grpc::Status ClusterManager::Stub::ListNodePools(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::google::container::v1::ListNodePoolsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ListNodePools_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::ListNodePoolsResponse>* ClusterManager::Stub::AsyncListNodePoolsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListNodePoolsResponse>(channel_.get(), cq, rpcmethod_ListNodePools_, context, request);
}

::grpc::Status ClusterManager::Stub::GetNodePool(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::google::container::v1::NodePool* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetNodePool_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::NodePool>* ClusterManager::Stub::AsyncGetNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::container::v1::NodePool>(channel_.get(), cq, rpcmethod_GetNodePool_, context, request);
}

::grpc::Status ClusterManager::Stub::CreateNodePool(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CreateNodePool_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncCreateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>(channel_.get(), cq, rpcmethod_CreateNodePool_, context, request);
}

::grpc::Status ClusterManager::Stub::DeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteNodePool_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncDeleteNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>(channel_.get(), cq, rpcmethod_DeleteNodePool_, context, request);
}

::grpc::Status ClusterManager::Stub::RollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RollbackNodePoolUpgrade_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncRollbackNodePoolUpgradeRaw(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>(channel_.get(), cq, rpcmethod_RollbackNodePoolUpgrade_, context, request);
}

::grpc::Status ClusterManager::Stub::SetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetNodePoolManagement_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncSetNodePoolManagementRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>(channel_.get(), cq, rpcmethod_SetNodePoolManagement_, context, request);
}

ClusterManager::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::ListClustersRequest, ::google::container::v1::ListClustersResponse>(
          std::mem_fn(&ClusterManager::Service::ListClusters), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::GetClusterRequest, ::google::container::v1::Cluster>(
          std::mem_fn(&ClusterManager::Service::GetCluster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::CreateClusterRequest, ::google::container::v1::Operation>(
          std::mem_fn(&ClusterManager::Service::CreateCluster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::UpdateClusterRequest, ::google::container::v1::Operation>(
          std::mem_fn(&ClusterManager::Service::UpdateCluster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::DeleteClusterRequest, ::google::container::v1::Operation>(
          std::mem_fn(&ClusterManager::Service::DeleteCluster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::ListOperationsRequest, ::google::container::v1::ListOperationsResponse>(
          std::mem_fn(&ClusterManager::Service::ListOperations), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::GetOperationRequest, ::google::container::v1::Operation>(
          std::mem_fn(&ClusterManager::Service::GetOperation), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::CancelOperationRequest, ::google::protobuf::Empty>(
          std::mem_fn(&ClusterManager::Service::CancelOperation), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::GetServerConfigRequest, ::google::container::v1::ServerConfig>(
          std::mem_fn(&ClusterManager::Service::GetServerConfig), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[9],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::ListNodePoolsRequest, ::google::container::v1::ListNodePoolsResponse>(
          std::mem_fn(&ClusterManager::Service::ListNodePools), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[10],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::GetNodePoolRequest, ::google::container::v1::NodePool>(
          std::mem_fn(&ClusterManager::Service::GetNodePool), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[11],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::CreateNodePoolRequest, ::google::container::v1::Operation>(
          std::mem_fn(&ClusterManager::Service::CreateNodePool), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[12],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::DeleteNodePoolRequest, ::google::container::v1::Operation>(
          std::mem_fn(&ClusterManager::Service::DeleteNodePool), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[13],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::RollbackNodePoolUpgradeRequest, ::google::container::v1::Operation>(
          std::mem_fn(&ClusterManager::Service::RollbackNodePoolUpgrade), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ClusterManager_method_names[14],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::SetNodePoolManagementRequest, ::google::container::v1::Operation>(
          std::mem_fn(&ClusterManager::Service::SetNodePoolManagement), this)));
}

ClusterManager::Service::~Service() {
}

::grpc::Status ClusterManager::Service::ListClusters(::grpc::ServerContext* context, const ::google::container::v1::ListClustersRequest* request, ::google::container::v1::ListClustersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::GetCluster(::grpc::ServerContext* context, const ::google::container::v1::GetClusterRequest* request, ::google::container::v1::Cluster* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::CreateCluster(::grpc::ServerContext* context, const ::google::container::v1::CreateClusterRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::UpdateCluster(::grpc::ServerContext* context, const ::google::container::v1::UpdateClusterRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::DeleteCluster(::grpc::ServerContext* context, const ::google::container::v1::DeleteClusterRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::ListOperations(::grpc::ServerContext* context, const ::google::container::v1::ListOperationsRequest* request, ::google::container::v1::ListOperationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::GetOperation(::grpc::ServerContext* context, const ::google::container::v1::GetOperationRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::CancelOperation(::grpc::ServerContext* context, const ::google::container::v1::CancelOperationRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::GetServerConfig(::grpc::ServerContext* context, const ::google::container::v1::GetServerConfigRequest* request, ::google::container::v1::ServerConfig* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::ListNodePools(::grpc::ServerContext* context, const ::google::container::v1::ListNodePoolsRequest* request, ::google::container::v1::ListNodePoolsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::GetNodePool(::grpc::ServerContext* context, const ::google::container::v1::GetNodePoolRequest* request, ::google::container::v1::NodePool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::CreateNodePool(::grpc::ServerContext* context, const ::google::container::v1::CreateNodePoolRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::DeleteNodePool(::grpc::ServerContext* context, const ::google::container::v1::DeleteNodePoolRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::RollbackNodePoolUpgrade(::grpc::ServerContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetNodePoolManagement(::grpc::ServerContext* context, const ::google::container::v1::SetNodePoolManagementRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace container
}  // namespace v1

