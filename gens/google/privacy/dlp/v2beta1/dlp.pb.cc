// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/dlp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/privacy/dlp/v2beta1/dlp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace privacy {
namespace dlp {
namespace v2beta1 {
class InspectConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InspectConfig> {
} _InspectConfig_default_instance_;
class ContentItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContentItem> {
  public:
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr value_;
} _ContentItem_default_instance_;
class InspectResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InspectResult> {
} _InspectResult_default_instance_;
class FindingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Finding> {
} _Finding_default_instance_;
class LocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Location> {
} _Location_default_instance_;
class RangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Range> {
} _Range_default_instance_;
class ImageLocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImageLocation> {
} _ImageLocation_default_instance_;
class RedactContentRequest_ReplaceConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RedactContentRequest_ReplaceConfig> {
} _RedactContentRequest_ReplaceConfig_default_instance_;
class RedactContentRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RedactContentRequest> {
} _RedactContentRequest_default_instance_;
class RedactContentResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RedactContentResponse> {
} _RedactContentResponse_default_instance_;
class InspectContentRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InspectContentRequest> {
} _InspectContentRequest_default_instance_;
class InspectContentResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InspectContentResponse> {
} _InspectContentResponse_default_instance_;
class CreateInspectOperationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateInspectOperationRequest> {
} _CreateInspectOperationRequest_default_instance_;
class InfoTypeStatisticsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InfoTypeStatistics> {
} _InfoTypeStatistics_default_instance_;
class InspectOperationMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InspectOperationMetadata> {
} _InspectOperationMetadata_default_instance_;
class InspectOperationResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InspectOperationResult> {
} _InspectOperationResult_default_instance_;
class ListInspectFindingsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListInspectFindingsRequest> {
} _ListInspectFindingsRequest_default_instance_;
class ListInspectFindingsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListInspectFindingsResponse> {
} _ListInspectFindingsResponse_default_instance_;
class InfoTypeDescriptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InfoTypeDescription> {
} _InfoTypeDescription_default_instance_;
class ListInfoTypesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListInfoTypesRequest> {
} _ListInfoTypesRequest_default_instance_;
class ListInfoTypesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListInfoTypesResponse> {
} _ListInfoTypesResponse_default_instance_;
class CategoryDescriptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CategoryDescription> {
} _CategoryDescription_default_instance_;
class ListRootCategoriesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListRootCategoriesRequest> {
} _ListRootCategoriesRequest_default_instance_;
class ListRootCategoriesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListRootCategoriesResponse> {
} _ListRootCategoriesResponse_default_instance_;

namespace protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[24];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig, info_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig, min_likelihood_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig, max_findings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig, include_quote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectConfig, exclude_types_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentItem, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentItem, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentItem, type_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ContentItem_default_instance_), data_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ContentItem_default_instance_), value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentItem, data_item_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectResult, findings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectResult, findings_truncated_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finding, quote_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finding, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finding, likelihood_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finding, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Finding, create_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, byte_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, codepoint_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, image_boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, record_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, field_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocation, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocation, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocation, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageLocation, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest_ReplaceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest_ReplaceConfig, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest_ReplaceConfig, replace_with_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest, inspect_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentRequest, replace_configs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedactContentResponse, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectContentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectContentRequest, inspect_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectContentRequest, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectContentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectContentResponse, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInspectOperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInspectOperationRequest, inspect_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateInspectOperationRequest, storage_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoTypeStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoTypeStatistics, info_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoTypeStatistics, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationMetadata, processed_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationMetadata, total_estimated_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationMetadata, info_type_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationMetadata, create_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InspectOperationResult, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsRequest, page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInspectFindingsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoTypeDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoTypeDescription, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoTypeDescription, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoTypeDescription, categories_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInfoTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInfoTypesRequest, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInfoTypesRequest, language_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInfoTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListInfoTypesResponse, info_types_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryDescription, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryDescription, display_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRootCategoriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRootCategoriesRequest, language_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRootCategoriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRootCategoriesResponse, categories_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(InspectConfig)},
  { 9, -1, sizeof(ContentItem)},
  { 17, -1, sizeof(InspectResult)},
  { 23, -1, sizeof(Finding)},
  { 32, -1, sizeof(Location)},
  { 41, -1, sizeof(Range)},
  { 47, -1, sizeof(ImageLocation)},
  { 55, -1, sizeof(RedactContentRequest_ReplaceConfig)},
  { 61, -1, sizeof(RedactContentRequest)},
  { 68, -1, sizeof(RedactContentResponse)},
  { 73, -1, sizeof(InspectContentRequest)},
  { 79, -1, sizeof(InspectContentResponse)},
  { 84, -1, sizeof(CreateInspectOperationRequest)},
  { 90, -1, sizeof(InfoTypeStatistics)},
  { 96, -1, sizeof(InspectOperationMetadata)},
  { 104, -1, sizeof(InspectOperationResult)},
  { 109, -1, sizeof(ListInspectFindingsRequest)},
  { 116, -1, sizeof(ListInspectFindingsResponse)},
  { 122, -1, sizeof(InfoTypeDescription)},
  { 129, -1, sizeof(ListInfoTypesRequest)},
  { 135, -1, sizeof(ListInfoTypesResponse)},
  { 140, -1, sizeof(CategoryDescription)},
  { 146, -1, sizeof(ListRootCategoriesRequest)},
  { 151, -1, sizeof(ListRootCategoriesResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InspectConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContentItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InspectResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Finding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Range_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedactContentRequest_ReplaceConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedactContentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedactContentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InspectContentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InspectContentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateInspectOperationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfoTypeStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InspectOperationMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InspectOperationResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListInspectFindingsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListInspectFindingsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfoTypeDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListInfoTypesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListInfoTypesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CategoryDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListRootCategoriesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListRootCategoriesResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/privacy/dlp/v2beta1/dlp.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 24);
}

}  // namespace

void TableStruct::Shutdown() {
  _InspectConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ContentItem_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _InspectResult_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Finding_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Location_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Range_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ImageLocation_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _RedactContentRequest_ReplaceConfig_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _RedactContentRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _RedactContentResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _InspectContentRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _InspectContentResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CreateInspectOperationRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _InfoTypeStatistics_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _InspectOperationMetadata_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _InspectOperationResult_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _ListInspectFindingsRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _ListInspectFindingsResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _InfoTypeDescription_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _ListInfoTypesRequest_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _ListInfoTypesResponse_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CategoryDescription_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _ListRootCategoriesRequest_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _ListRootCategoriesResponse_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::longrunning::protobuf_google_2flongrunning_2foperations_2eproto::InitDefaults();
  ::google::privacy::dlp::v2beta1::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _InspectConfig_default_instance_.DefaultConstruct();
  _ContentItem_default_instance_.DefaultConstruct();
  _InspectResult_default_instance_.DefaultConstruct();
  _Finding_default_instance_.DefaultConstruct();
  _Location_default_instance_.DefaultConstruct();
  _Range_default_instance_.DefaultConstruct();
  _ImageLocation_default_instance_.DefaultConstruct();
  _RedactContentRequest_ReplaceConfig_default_instance_.DefaultConstruct();
  _RedactContentRequest_default_instance_.DefaultConstruct();
  _RedactContentResponse_default_instance_.DefaultConstruct();
  _InspectContentRequest_default_instance_.DefaultConstruct();
  _InspectContentResponse_default_instance_.DefaultConstruct();
  _CreateInspectOperationRequest_default_instance_.DefaultConstruct();
  _InfoTypeStatistics_default_instance_.DefaultConstruct();
  _InspectOperationMetadata_default_instance_.DefaultConstruct();
  _InspectOperationResult_default_instance_.DefaultConstruct();
  _ListInspectFindingsRequest_default_instance_.DefaultConstruct();
  _ListInspectFindingsResponse_default_instance_.DefaultConstruct();
  _InfoTypeDescription_default_instance_.DefaultConstruct();
  _ListInfoTypesRequest_default_instance_.DefaultConstruct();
  _ListInfoTypesResponse_default_instance_.DefaultConstruct();
  _CategoryDescription_default_instance_.DefaultConstruct();
  _ListRootCategoriesRequest_default_instance_.DefaultConstruct();
  _ListRootCategoriesResponse_default_instance_.DefaultConstruct();
  _ContentItem_default_instance_.data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _ContentItem_default_instance_.value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Finding_default_instance_.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2beta1::InfoType*>(
      ::google::privacy::dlp::v2beta1::InfoType::internal_default_instance());
  _Finding_default_instance_.get_mutable()->location_ = const_cast< ::google::privacy::dlp::v2beta1::Location*>(
      ::google::privacy::dlp::v2beta1::Location::internal_default_instance());
  _Finding_default_instance_.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Location_default_instance_.get_mutable()->byte_range_ = const_cast< ::google::privacy::dlp::v2beta1::Range*>(
      ::google::privacy::dlp::v2beta1::Range::internal_default_instance());
  _Location_default_instance_.get_mutable()->codepoint_range_ = const_cast< ::google::privacy::dlp::v2beta1::Range*>(
      ::google::privacy::dlp::v2beta1::Range::internal_default_instance());
  _Location_default_instance_.get_mutable()->record_key_ = const_cast< ::google::privacy::dlp::v2beta1::RecordKey*>(
      ::google::privacy::dlp::v2beta1::RecordKey::internal_default_instance());
  _Location_default_instance_.get_mutable()->field_id_ = const_cast< ::google::privacy::dlp::v2beta1::FieldId*>(
      ::google::privacy::dlp::v2beta1::FieldId::internal_default_instance());
  _RedactContentRequest_ReplaceConfig_default_instance_.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2beta1::InfoType*>(
      ::google::privacy::dlp::v2beta1::InfoType::internal_default_instance());
  _RedactContentRequest_default_instance_.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2beta1::InspectConfig*>(
      ::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance());
  _InspectContentRequest_default_instance_.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2beta1::InspectConfig*>(
      ::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance());
  _CreateInspectOperationRequest_default_instance_.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2beta1::InspectConfig*>(
      ::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance());
  _CreateInspectOperationRequest_default_instance_.get_mutable()->storage_config_ = const_cast< ::google::privacy::dlp::v2beta1::StorageConfig*>(
      ::google::privacy::dlp::v2beta1::StorageConfig::internal_default_instance());
  _InfoTypeStatistics_default_instance_.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2beta1::InfoType*>(
      ::google::privacy::dlp::v2beta1::InfoType::internal_default_instance());
  _InspectOperationMetadata_default_instance_.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _ListInspectFindingsResponse_default_instance_.get_mutable()->result_ = const_cast< ::google::privacy::dlp::v2beta1::InspectResult*>(
      ::google::privacy::dlp::v2beta1::InspectResult::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n$google/privacy/dlp/v2beta1/dlp.proto\022\032"
      "google.privacy.dlp.v2beta1\032\034google/api/a"
      "nnotations.proto\032#google/longrunning/ope"
      "rations.proto\032(google/privacy/dlp/v2beta"
      "1/storage.proto\032\037google/protobuf/timesta"
      "mp.proto\"\315\001\n\rInspectConfig\0228\n\ninfo_types"
      "\030\001 \003(\0132$.google.privacy.dlp.v2beta1.Info"
      "Type\022>\n\016min_likelihood\030\002 \001(\0162&.google.pr"
      "ivacy.dlp.v2beta1.Likelihood\022\024\n\014max_find"
      "ings\030\003 \001(\005\022\025\n\rinclude_quote\030\004 \001(\010\022\025\n\rexc"
      "lude_types\030\006 \001(\010\"I\n\013ContentItem\022\014\n\004type\030"
      "\001 \001(\t\022\016\n\004data\030\002 \001(\014H\000\022\017\n\005value\030\003 \001(\tH\000B\013"
      "\n\tdata_item\"b\n\rInspectResult\0225\n\010findings"
      "\030\001 \003(\0132#.google.privacy.dlp.v2beta1.Find"
      "ing\022\032\n\022findings_truncated\030\002 \001(\010\"\366\001\n\007Find"
      "ing\022\r\n\005quote\030\001 \001(\t\0227\n\tinfo_type\030\002 \001(\0132$."
      "google.privacy.dlp.v2beta1.InfoType\022:\n\nl"
      "ikelihood\030\003 \001(\0162&.google.privacy.dlp.v2b"
      "eta1.Likelihood\0226\n\010location\030\004 \001(\0132$.goog"
      "le.privacy.dlp.v2beta1.Location\022/\n\013creat"
      "e_time\030\006 \001(\0132\032.google.protobuf.Timestamp"
      "\"\257\002\n\010Location\0225\n\nbyte_range\030\001 \001(\0132!.goog"
      "le.privacy.dlp.v2beta1.Range\022:\n\017codepoin"
      "t_range\030\002 \001(\0132!.google.privacy.dlp.v2bet"
      "a1.Range\022>\n\013image_boxes\030\003 \003(\0132).google.p"
      "rivacy.dlp.v2beta1.ImageLocation\0229\n\nreco"
      "rd_key\030\004 \001(\0132%.google.privacy.dlp.v2beta"
      "1.RecordKey\0225\n\010field_id\030\005 \001(\0132#.google.p"
      "rivacy.dlp.v2beta1.FieldId\"#\n\005Range\022\r\n\005s"
      "tart\030\001 \001(\003\022\013\n\003end\030\002 \001(\003\"I\n\rImageLocation"
      "\022\013\n\003top\030\001 \001(\005\022\014\n\004left\030\002 \001(\005\022\r\n\005width\030\003 \001"
      "(\005\022\016\n\006height\030\004 \001(\005\"\312\002\n\024RedactContentRequ"
      "est\022A\n\016inspect_config\030\001 \001(\0132).google.pri"
      "vacy.dlp.v2beta1.InspectConfig\0226\n\005items\030"
      "\002 \003(\0132\'.google.privacy.dlp.v2beta1.Conte"
      "ntItem\022W\n\017replace_configs\030\003 \003(\0132>.google"
      ".privacy.dlp.v2beta1.RedactContentReques"
      "t.ReplaceConfig\032^\n\rReplaceConfig\0227\n\tinfo"
      "_type\030\001 \001(\0132$.google.privacy.dlp.v2beta1"
      ".InfoType\022\024\n\014replace_with\030\002 \001(\t\"O\n\025Redac"
      "tContentResponse\0226\n\005items\030\001 \003(\0132\'.google"
      ".privacy.dlp.v2beta1.ContentItem\"\222\001\n\025Ins"
      "pectContentRequest\022A\n\016inspect_config\030\001 \001"
      "(\0132).google.privacy.dlp.v2beta1.InspectC"
      "onfig\0226\n\005items\030\002 \003(\0132\'.google.privacy.dl"
      "p.v2beta1.ContentItem\"T\n\026InspectContentR"
      "esponse\022:\n\007results\030\001 \003(\0132).google.privac"
      "y.dlp.v2beta1.InspectResult\"\245\001\n\035CreateIn"
      "spectOperationRequest\022A\n\016inspect_config\030"
      "\001 \001(\0132).google.privacy.dlp.v2beta1.Inspe"
      "ctConfig\022A\n\016storage_config\030\002 \001(\0132).googl"
      "e.privacy.dlp.v2beta1.StorageConfig\"\\\n\022I"
      "nfoTypeStatistics\0227\n\tinfo_type\030\001 \001(\0132$.g"
      "oogle.privacy.dlp.v2beta1.InfoType\022\r\n\005co"
      "unt\030\002 \001(\003\"\314\001\n\030InspectOperationMetadata\022\027"
      "\n\017processed_bytes\030\001 \001(\003\022\035\n\025total_estimat"
      "ed_bytes\030\004 \001(\003\022G\n\017info_type_stats\030\002 \003(\0132"
      "..google.privacy.dlp.v2beta1.InfoTypeSta"
      "tistics\022/\n\013create_time\030\003 \001(\0132\032.google.pr"
      "otobuf.Timestamp\"&\n\026InspectOperationResu"
      "lt\022\014\n\004name\030\001 \001(\t\"Q\n\032ListInspectFindingsR"
      "equest\022\014\n\004name\030\001 \001(\t\022\021\n\tpage_size\030\002 \001(\005\022"
      "\022\n\npage_token\030\003 \001(\t\"q\n\033ListInspectFindin"
      "gsResponse\0229\n\006result\030\001 \001(\0132).google.priv"
      "acy.dlp.v2beta1.InspectResult\022\027\n\017next_pa"
      "ge_token\030\002 \001(\t\"~\n\023InfoTypeDescription\022\014\n"
      "\004name\030\001 \001(\t\022\024\n\014display_name\030\002 \001(\t\022C\n\ncat"
      "egories\030\003 \003(\0132/.google.privacy.dlp.v2bet"
      "a1.CategoryDescription\"\?\n\024ListInfoTypesR"
      "equest\022\020\n\010category\030\001 \001(\t\022\025\n\rlanguage_cod"
      "e\030\002 \001(\t\"\\\n\025ListInfoTypesResponse\022C\n\ninfo"
      "_types\030\001 \003(\0132/.google.privacy.dlp.v2beta"
      "1.InfoTypeDescription\"9\n\023CategoryDescrip"
      "tion\022\014\n\004name\030\001 \001(\t\022\024\n\014display_name\030\002 \001(\t"
      "\"2\n\031ListRootCategoriesRequest\022\025\n\rlanguag"
      "e_code\030\001 \001(\t\"a\n\032ListRootCategoriesRespon"
      "se\022C\n\ncategories\030\001 \003(\0132/.google.privacy."
      "dlp.v2beta1.CategoryDescription*t\n\nLikel"
      "ihood\022\032\n\026LIKELIHOOD_UNSPECIFIED\020\000\022\021\n\rVER"
      "Y_UNLIKELY\020\001\022\014\n\010UNLIKELY\020\002\022\014\n\010POSSIBLE\020\003"
      "\022\n\n\006LIKELY\020\004\022\017\n\013VERY_LIKELY\020\0052\366\007\n\nDlpSer"
      "vice\022\234\001\n\016InspectContent\0221.google.privacy"
      ".dlp.v2beta1.InspectContentRequest\0322.goo"
      "gle.privacy.dlp.v2beta1.InspectContentRe"
      "sponse\"#\202\323\344\223\002\035\"\030/v2beta1/content:inspect"
      ":\001*\022\230\001\n\rRedactContent\0220.google.privacy.d"
      "lp.v2beta1.RedactContentRequest\0321.google"
      ".privacy.dlp.v2beta1.RedactContentRespon"
      "se\"\"\202\323\344\223\002\034\"\027/v2beta1/content:redact:\001*\022\232"
      "\001\n\026CreateInspectOperation\0229.google.priva"
      "cy.dlp.v2beta1.CreateInspectOperationReq"
      "uest\032\035.google.longrunning.Operation\"&\202\323\344"
      "\223\002 \"\033/v2beta1/inspect/operations:\001*\022\272\001\n\023"
      "ListInspectFindings\0226.google.privacy.dlp"
      ".v2beta1.ListInspectFindingsRequest\0327.go"
      "ogle.privacy.dlp.v2beta1.ListInspectFind"
      "ingsResponse\"2\202\323\344\223\002,\022*/v2beta1/{name=ins"
      "pect/results/*}/findings\022\254\001\n\rListInfoTyp"
      "es\0220.google.privacy.dlp.v2beta1.ListInfo"
      "TypesRequest\0321.google.privacy.dlp.v2beta"
      "1.ListInfoTypesResponse\"6\202\323\344\223\0020\022./v2beta"
      "1/rootCategories/{category=*}/infoTypes\022"
      "\244\001\n\022ListRootCategories\0225.google.privacy."
      "dlp.v2beta1.ListRootCategoriesRequest\0326."
      "google.privacy.dlp.v2beta1.ListRootCateg"
      "oriesResponse\"\037\202\323\344\223\002\031\022\027/v2beta1/rootCate"
      "goriesBk\n\036com.google.privacy.dlp.v2beta1"
      "B\010DlpProtoP\001Z=google.golang.org/genproto"
      "/googleapis/privacy/dlp/v2beta1;dlpb\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4363);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/privacy/dlp/v2beta1/dlp.proto", &protobuf_RegisterTypes);
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::longrunning::protobuf_google_2flongrunning_2foperations_2eproto::AddDescriptors();
  ::google::privacy::dlp::v2beta1::protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fstorage_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto

const ::google::protobuf::EnumDescriptor* Likelihood_descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_enum_descriptors[0];
}
bool Likelihood_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectConfig::kInfoTypesFieldNumber;
const int InspectConfig::kMinLikelihoodFieldNumber;
const int InspectConfig::kMaxFindingsFieldNumber;
const int InspectConfig::kIncludeQuoteFieldNumber;
const int InspectConfig::kExcludeTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectConfig::InspectConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectConfig)
}
InspectConfig::InspectConfig(const InspectConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_types_(from.info_types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_likelihood_, &from.min_likelihood_,
    reinterpret_cast<char*>(&exclude_types_) -
    reinterpret_cast<char*>(&min_likelihood_) + sizeof(exclude_types_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectConfig)
}

void InspectConfig::SharedCtor() {
  ::memset(&min_likelihood_, 0, reinterpret_cast<char*>(&exclude_types_) -
    reinterpret_cast<char*>(&min_likelihood_) + sizeof(exclude_types_));
  _cached_size_ = 0;
}

InspectConfig::~InspectConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectConfig)
  SharedDtor();
}

void InspectConfig::SharedDtor() {
}

void InspectConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectConfig::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[0].descriptor;
}

const InspectConfig& InspectConfig::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InspectConfig* InspectConfig::New(::google::protobuf::Arena* arena) const {
  InspectConfig* n = new InspectConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectConfig)
  info_types_.Clear();
  ::memset(&min_likelihood_, 0, reinterpret_cast<char*>(&exclude_types_) -
    reinterpret_cast<char*>(&min_likelihood_) + sizeof(exclude_types_));
}

bool InspectConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_info_types()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_min_likelihood(static_cast< ::google::privacy::dlp::v2beta1::Likelihood >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_findings = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_findings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool include_quote = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_quote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool exclude_types = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectConfig)
  return false;
#undef DO_
}

void InspectConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectConfig)
  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  for (unsigned int i = 0, n = this->info_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_types(i), output);
  }

  // .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
  if (this->min_likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->min_likelihood(), output);
  }

  // int32 max_findings = 3;
  if (this->max_findings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_findings(), output);
  }

  // bool include_quote = 4;
  if (this->include_quote() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->include_quote(), output);
  }

  // bool exclude_types = 6;
  if (this->exclude_types() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->exclude_types(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectConfig)
}

::google::protobuf::uint8* InspectConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectConfig)
  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  for (unsigned int i = 0, n = this->info_types_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->info_types(i), false, target);
  }

  // .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
  if (this->min_likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->min_likelihood(), target);
  }

  // int32 max_findings = 3;
  if (this->max_findings() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_findings(), target);
  }

  // bool include_quote = 4;
  if (this->include_quote() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->include_quote(), target);
  }

  // bool exclude_types = 6;
  if (this->exclude_types() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->exclude_types(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectConfig)
  return target;
}

size_t InspectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectConfig)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  {
    unsigned int count = this->info_types_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_types(i));
    }
  }

  // .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
  if (this->min_likelihood() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->min_likelihood());
  }

  // int32 max_findings = 3;
  if (this->max_findings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_findings());
  }

  // bool include_quote = 4;
  if (this->include_quote() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_types = 6;
  if (this->exclude_types() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectConfig)
    MergeFrom(*source);
  }
}

void InspectConfig::MergeFrom(const InspectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_types_.MergeFrom(from.info_types_);
  if (from.min_likelihood() != 0) {
    set_min_likelihood(from.min_likelihood());
  }
  if (from.max_findings() != 0) {
    set_max_findings(from.max_findings());
  }
  if (from.include_quote() != 0) {
    set_include_quote(from.include_quote());
  }
  if (from.exclude_types() != 0) {
    set_exclude_types(from.exclude_types());
  }
}

void InspectConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectConfig::CopyFrom(const InspectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectConfig::IsInitialized() const {
  return true;
}

void InspectConfig::Swap(InspectConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectConfig::InternalSwap(InspectConfig* other) {
  info_types_.UnsafeArenaSwap(&other->info_types_);
  std::swap(min_likelihood_, other->min_likelihood_);
  std::swap(max_findings_, other->max_findings_);
  std::swap(include_quote_, other->include_quote_);
  std::swap(exclude_types_, other->exclude_types_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InspectConfig

// repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
int InspectConfig::info_types_size() const {
  return info_types_.size();
}
void InspectConfig::clear_info_types() {
  info_types_.Clear();
}
const ::google::privacy::dlp::v2beta1::InfoType& InspectConfig::info_types(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_.Get(index);
}
::google::privacy::dlp::v2beta1::InfoType* InspectConfig::mutable_info_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_.Mutable(index);
}
::google::privacy::dlp::v2beta1::InfoType* InspectConfig::add_info_types() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >*
InspectConfig::mutable_info_types() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return &info_types_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >&
InspectConfig::info_types() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_;
}

// .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
void InspectConfig::clear_min_likelihood() {
  min_likelihood_ = 0;
}
::google::privacy::dlp::v2beta1::Likelihood InspectConfig::min_likelihood() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.min_likelihood)
  return static_cast< ::google::privacy::dlp::v2beta1::Likelihood >(min_likelihood_);
}
void InspectConfig::set_min_likelihood(::google::privacy::dlp::v2beta1::Likelihood value) {
  
  min_likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.min_likelihood)
}

// int32 max_findings = 3;
void InspectConfig::clear_max_findings() {
  max_findings_ = 0;
}
::google::protobuf::int32 InspectConfig::max_findings() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.max_findings)
  return max_findings_;
}
void InspectConfig::set_max_findings(::google::protobuf::int32 value) {
  
  max_findings_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.max_findings)
}

// bool include_quote = 4;
void InspectConfig::clear_include_quote() {
  include_quote_ = false;
}
bool InspectConfig::include_quote() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.include_quote)
  return include_quote_;
}
void InspectConfig::set_include_quote(bool value) {
  
  include_quote_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.include_quote)
}

// bool exclude_types = 6;
void InspectConfig::clear_exclude_types() {
  exclude_types_ = false;
}
bool InspectConfig::exclude_types() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.exclude_types)
  return exclude_types_;
}
void InspectConfig::set_exclude_types(bool value) {
  
  exclude_types_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.exclude_types)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentItem::kTypeFieldNumber;
const int ContentItem::kDataFieldNumber;
const int ContentItem::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentItem::ContentItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ContentItem)
}
ContentItem::ContentItem(const ContentItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  clear_has_data_item();
  switch (from.data_item_case()) {
    case kData: {
      set_data(from.data());
      break;
    }
    case kValue: {
      set_value(from.value());
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ContentItem)
}

void ContentItem::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_item();
  _cached_size_ = 0;
}

ContentItem::~ContentItem() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ContentItem)
  SharedDtor();
}

void ContentItem::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_data_item()) {
    clear_data_item();
  }
}

void ContentItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentItem::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[1].descriptor;
}

const ContentItem& ContentItem::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContentItem* ContentItem::New(::google::protobuf::Arena* arena) const {
  ContentItem* n = new ContentItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentItem::clear_data_item() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2beta1.ContentItem)
  switch (data_item_case()) {
    case kData: {
      data_item_.data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kValue: {
      data_item_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_ITEM_NOT_SET;
}


void ContentItem::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ContentItem)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_data_item();
}

bool ContentItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ContentItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ContentItem.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ContentItem.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ContentItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ContentItem)
  return false;
#undef DO_
}

void ContentItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ContentItem)
  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ContentItem.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ContentItem.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ContentItem)
}

::google::protobuf::uint8* ContentItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ContentItem)
  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ContentItem.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ContentItem.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ContentItem)
  return target;
}

size_t ContentItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ContentItem)
  size_t total_size = 0;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  switch (data_item_case()) {
    // bytes data = 2;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
      break;
    }
    // string value = 3;
    case kValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ContentItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ContentItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ContentItem)
    MergeFrom(*source);
  }
}

void ContentItem::MergeFrom(const ContentItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ContentItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  switch (from.data_item_case()) {
    case kData: {
      set_data(from.data());
      break;
    }
    case kValue: {
      set_value(from.value());
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
}

void ContentItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ContentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentItem::CopyFrom(const ContentItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ContentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentItem::IsInitialized() const {
  return true;
}

void ContentItem::Swap(ContentItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentItem::InternalSwap(ContentItem* other) {
  type_.Swap(&other->type_);
  std::swap(data_item_, other->data_item_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentItem::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentItem

// string type = 1;
void ContentItem::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContentItem::type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ContentItem.type)
  return type_.GetNoArena();
}
void ContentItem::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.type)
}
#if LANG_CXX11
void ContentItem::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ContentItem.type)
}
#endif
void ContentItem::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ContentItem.type)
}
void ContentItem::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ContentItem.type)
}
::std::string* ContentItem::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ContentItem.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentItem::release_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ContentItem.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentItem::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ContentItem.type)
}

// bytes data = 2;
bool ContentItem::has_data() const {
  return data_item_case() == kData;
}
void ContentItem::set_has_data() {
  _oneof_case_[0] = kData;
}
void ContentItem::clear_data() {
  if (has_data()) {
    data_item_.data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data_item();
  }
}
const ::std::string& ContentItem::data() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ContentItem.data)
  if (has_data()) {
    return data_item_.data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ContentItem::set_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.data)
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.data)
}
#if LANG_CXX11
void ContentItem::set_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.data)
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ContentItem.data)
}
#endif
void ContentItem::set_data(const char* value) {
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ContentItem.data)
}
void ContentItem::set_data(const void* value, size_t size) {
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ContentItem.data)
}
::std::string* ContentItem::mutable_data() {
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ContentItem.data)
  return data_item_.data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentItem::release_data() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ContentItem.data)
  if (has_data()) {
    clear_has_data_item();
    return data_item_.data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ContentItem::set_allocated_data(::std::string* data) {
  if (!has_data()) {
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_item();
  if (data != NULL) {
    set_has_data();
    data_item_.data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        data);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ContentItem.data)
}

// string value = 3;
bool ContentItem::has_value() const {
  return data_item_case() == kValue;
}
void ContentItem::set_has_value() {
  _oneof_case_[0] = kValue;
}
void ContentItem::clear_value() {
  if (has_value()) {
    data_item_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data_item();
  }
}
const ::std::string& ContentItem::value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ContentItem.value)
  if (has_value()) {
    return data_item_.value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ContentItem::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.value)
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.value)
}
#if LANG_CXX11
void ContentItem::set_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.value)
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ContentItem.value)
}
#endif
void ContentItem::set_value(const char* value) {
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ContentItem.value)
}
void ContentItem::set_value(const char* value, size_t size) {
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ContentItem.value)
}
::std::string* ContentItem::mutable_value() {
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ContentItem.value)
  return data_item_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentItem::release_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ContentItem.value)
  if (has_value()) {
    clear_has_data_item();
    return data_item_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ContentItem::set_allocated_value(::std::string* value) {
  if (!has_value()) {
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_item();
  if (value != NULL) {
    set_has_value();
    data_item_.value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ContentItem.value)
}

bool ContentItem::has_data_item() const {
  return data_item_case() != DATA_ITEM_NOT_SET;
}
void ContentItem::clear_has_data_item() {
  _oneof_case_[0] = DATA_ITEM_NOT_SET;
}
ContentItem::DataItemCase ContentItem::data_item_case() const {
  return ContentItem::DataItemCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectResult::kFindingsFieldNumber;
const int InspectResult::kFindingsTruncatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectResult::InspectResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectResult)
}
InspectResult::InspectResult(const InspectResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      findings_(from.findings_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  findings_truncated_ = from.findings_truncated_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectResult)
}

void InspectResult::SharedCtor() {
  findings_truncated_ = false;
  _cached_size_ = 0;
}

InspectResult::~InspectResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectResult)
  SharedDtor();
}

void InspectResult::SharedDtor() {
}

void InspectResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectResult::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[2].descriptor;
}

const InspectResult& InspectResult::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InspectResult* InspectResult::New(::google::protobuf::Arena* arena) const {
  InspectResult* n = new InspectResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectResult)
  findings_.Clear();
  findings_truncated_ = false;
}

bool InspectResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_findings()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // bool findings_truncated = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &findings_truncated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectResult)
  return false;
#undef DO_
}

void InspectResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectResult)
  // repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
  for (unsigned int i = 0, n = this->findings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->findings(i), output);
  }

  // bool findings_truncated = 2;
  if (this->findings_truncated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->findings_truncated(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectResult)
}

::google::protobuf::uint8* InspectResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectResult)
  // repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
  for (unsigned int i = 0, n = this->findings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->findings(i), false, target);
  }

  // bool findings_truncated = 2;
  if (this->findings_truncated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->findings_truncated(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectResult)
  return target;
}

size_t InspectResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectResult)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
  {
    unsigned int count = this->findings_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->findings(i));
    }
  }

  // bool findings_truncated = 2;
  if (this->findings_truncated() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectResult)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectResult)
    MergeFrom(*source);
  }
}

void InspectResult::MergeFrom(const InspectResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  findings_.MergeFrom(from.findings_);
  if (from.findings_truncated() != 0) {
    set_findings_truncated(from.findings_truncated());
  }
}

void InspectResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectResult::CopyFrom(const InspectResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectResult::IsInitialized() const {
  return true;
}

void InspectResult::Swap(InspectResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectResult::InternalSwap(InspectResult* other) {
  findings_.UnsafeArenaSwap(&other->findings_);
  std::swap(findings_truncated_, other->findings_truncated_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectResult::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InspectResult

// repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
int InspectResult::findings_size() const {
  return findings_.size();
}
void InspectResult::clear_findings() {
  findings_.Clear();
}
const ::google::privacy::dlp::v2beta1::Finding& InspectResult::findings(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_.Get(index);
}
::google::privacy::dlp::v2beta1::Finding* InspectResult::mutable_findings(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_.Mutable(index);
}
::google::privacy::dlp::v2beta1::Finding* InspectResult::add_findings() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Finding >*
InspectResult::mutable_findings() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectResult.findings)
  return &findings_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Finding >&
InspectResult::findings() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_;
}

// bool findings_truncated = 2;
void InspectResult::clear_findings_truncated() {
  findings_truncated_ = false;
}
bool InspectResult::findings_truncated() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectResult.findings_truncated)
  return findings_truncated_;
}
void InspectResult::set_findings_truncated(bool value) {
  
  findings_truncated_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectResult.findings_truncated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Finding::kQuoteFieldNumber;
const int Finding::kInfoTypeFieldNumber;
const int Finding::kLikelihoodFieldNumber;
const int Finding::kLocationFieldNumber;
const int Finding::kCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Finding::Finding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Finding)
}
Finding::Finding(const Finding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.quote().size() > 0) {
    quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
  }
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType(*from.info_type_);
  } else {
    info_type_ = NULL;
  }
  if (from.has_location()) {
    location_ = new ::google::privacy::dlp::v2beta1::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  likelihood_ = from.likelihood_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Finding)
}

void Finding::SharedCtor() {
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_type_, 0, reinterpret_cast<char*>(&likelihood_) -
    reinterpret_cast<char*>(&info_type_) + sizeof(likelihood_));
  _cached_size_ = 0;
}

Finding::~Finding() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Finding)
  SharedDtor();
}

void Finding::SharedDtor() {
  quote_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete info_type_;
  }
  if (this != internal_default_instance()) {
    delete location_;
  }
  if (this != internal_default_instance()) {
    delete create_time_;
  }
}

void Finding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Finding::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[3].descriptor;
}

const Finding& Finding::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

Finding* Finding::New(::google::protobuf::Arena* arena) const {
  Finding* n = new Finding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Finding::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Finding)
  quote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  likelihood_ = 0;
}

bool Finding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Finding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string quote = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quote()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->quote().data(), this->quote().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.Finding.quote"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.InfoType info_type = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_likelihood(static_cast< ::google::privacy::dlp::v2beta1::Likelihood >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Location location = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Finding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Finding)
  return false;
#undef DO_
}

void Finding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Finding)
  // string quote = 1;
  if (this->quote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quote().data(), this->quote().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.Finding.quote");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->quote(), output);
  }

  // .google.privacy.dlp.v2beta1.InfoType info_type = 2;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_type_, output);
  }

  // .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
  if (this->likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->likelihood(), output);
  }

  // .google.privacy.dlp.v2beta1.Location location = 4;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->location_, output);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->create_time_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Finding)
}

::google::protobuf::uint8* Finding::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Finding)
  // string quote = 1;
  if (this->quote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quote().data(), this->quote().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.Finding.quote");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->quote(), target);
  }

  // .google.privacy.dlp.v2beta1.InfoType info_type = 2;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->info_type_, false, target);
  }

  // .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
  if (this->likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->likelihood(), target);
  }

  // .google.privacy.dlp.v2beta1.Location location = 4;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->location_, false, target);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->create_time_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Finding)
  return target;
}

size_t Finding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Finding)
  size_t total_size = 0;

  // string quote = 1;
  if (this->quote().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->quote());
  }

  // .google.privacy.dlp.v2beta1.InfoType info_type = 2;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_type_);
  }

  // .google.privacy.dlp.v2beta1.Location location = 4;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  // .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
  if (this->likelihood() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->likelihood());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Finding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Finding)
  GOOGLE_DCHECK_NE(&from, this);
  const Finding* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Finding>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Finding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Finding)
    MergeFrom(*source);
  }
}

void Finding::MergeFrom(const Finding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Finding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.quote().size() > 0) {

    quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
  }
  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
  }
  if (from.has_location()) {
    mutable_location()->::google::privacy::dlp::v2beta1::Location::MergeFrom(from.location());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.likelihood() != 0) {
    set_likelihood(from.likelihood());
  }
}

void Finding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Finding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Finding::CopyFrom(const Finding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Finding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Finding::IsInitialized() const {
  return true;
}

void Finding::Swap(Finding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Finding::InternalSwap(Finding* other) {
  quote_.Swap(&other->quote_);
  std::swap(info_type_, other->info_type_);
  std::swap(location_, other->location_);
  std::swap(create_time_, other->create_time_);
  std::swap(likelihood_, other->likelihood_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Finding::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Finding

// string quote = 1;
void Finding::clear_quote() {
  quote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Finding::quote() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.quote)
  return quote_.GetNoArena();
}
void Finding::set_quote(const ::std::string& value) {
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Finding.quote)
}
#if LANG_CXX11
void Finding::set_quote(::std::string&& value) {
  
  quote_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.Finding.quote)
}
#endif
void Finding::set_quote(const char* value) {
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.Finding.quote)
}
void Finding::set_quote(const char* value, size_t size) {
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.Finding.quote)
}
::std::string* Finding::mutable_quote() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.quote)
  return quote_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Finding::release_quote() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.quote)
  
  return quote_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Finding::set_allocated_quote(::std::string* quote) {
  if (quote != NULL) {
    
  } else {
    
  }
  quote_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quote);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.quote)
}

// .google.privacy.dlp.v2beta1.InfoType info_type = 2;
bool Finding::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
void Finding::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) delete info_type_;
  info_type_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InfoType& Finding::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.info_type)
  return info_type_ != NULL ? *info_type_
                         : *::google::privacy::dlp::v2beta1::InfoType::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InfoType* Finding::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.info_type)
  return info_type_;
}
::google::privacy::dlp::v2beta1::InfoType* Finding::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
void Finding::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  delete info_type_;
  info_type_ = info_type;
  if (info_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.info_type)
}

// .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
void Finding::clear_likelihood() {
  likelihood_ = 0;
}
::google::privacy::dlp::v2beta1::Likelihood Finding::likelihood() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.likelihood)
  return static_cast< ::google::privacy::dlp::v2beta1::Likelihood >(likelihood_);
}
void Finding::set_likelihood(::google::privacy::dlp::v2beta1::Likelihood value) {
  
  likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Finding.likelihood)
}

// .google.privacy.dlp.v2beta1.Location location = 4;
bool Finding::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void Finding::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::google::privacy::dlp::v2beta1::Location& Finding::location() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.location)
  return location_ != NULL ? *location_
                         : *::google::privacy::dlp::v2beta1::Location::internal_default_instance();
}
::google::privacy::dlp::v2beta1::Location* Finding::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::google::privacy::dlp::v2beta1::Location;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.location)
  return location_;
}
::google::privacy::dlp::v2beta1::Location* Finding::release_location() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.location)
  
  ::google::privacy::dlp::v2beta1::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void Finding::set_allocated_location(::google::privacy::dlp::v2beta1::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.location)
}

// .google.protobuf.Timestamp create_time = 6;
bool Finding::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void Finding::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& Finding::create_time() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Finding::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* Finding::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void Finding::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.create_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kByteRangeFieldNumber;
const int Location::kCodepointRangeFieldNumber;
const int Location::kImageBoxesFieldNumber;
const int Location::kRecordKeyFieldNumber;
const int Location::kFieldIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Location)
}
Location::Location(const Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      image_boxes_(from.image_boxes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_byte_range()) {
    byte_range_ = new ::google::privacy::dlp::v2beta1::Range(*from.byte_range_);
  } else {
    byte_range_ = NULL;
  }
  if (from.has_codepoint_range()) {
    codepoint_range_ = new ::google::privacy::dlp::v2beta1::Range(*from.codepoint_range_);
  } else {
    codepoint_range_ = NULL;
  }
  if (from.has_record_key()) {
    record_key_ = new ::google::privacy::dlp::v2beta1::RecordKey(*from.record_key_);
  } else {
    record_key_ = NULL;
  }
  if (from.has_field_id()) {
    field_id_ = new ::google::privacy::dlp::v2beta1::FieldId(*from.field_id_);
  } else {
    field_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Location)
}

void Location::SharedCtor() {
  ::memset(&byte_range_, 0, reinterpret_cast<char*>(&field_id_) -
    reinterpret_cast<char*>(&byte_range_) + sizeof(field_id_));
  _cached_size_ = 0;
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  if (this != internal_default_instance()) {
    delete byte_range_;
  }
  if (this != internal_default_instance()) {
    delete codepoint_range_;
  }
  if (this != internal_default_instance()) {
    delete record_key_;
  }
  if (this != internal_default_instance()) {
    delete field_id_;
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[4].descriptor;
}

const Location& Location::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

Location* Location::New(::google::protobuf::Arena* arena) const {
  Location* n = new Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Location)
  image_boxes_.Clear();
  if (GetArenaNoVirtual() == NULL && byte_range_ != NULL) {
    delete byte_range_;
  }
  byte_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && codepoint_range_ != NULL) {
    delete codepoint_range_;
  }
  codepoint_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && record_key_ != NULL) {
    delete record_key_;
  }
  record_key_ = NULL;
  if (GetArenaNoVirtual() == NULL && field_id_ != NULL) {
    delete field_id_;
  }
  field_id_ = NULL;
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.Range byte_range = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_byte_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_codepoint_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_image_boxes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.FieldId field_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Location)
  // .google.privacy.dlp.v2beta1.Range byte_range = 1;
  if (this->has_byte_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->byte_range_, output);
  }

  // .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
  if (this->has_codepoint_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->codepoint_range_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
  for (unsigned int i = 0, n = this->image_boxes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->image_boxes(i), output);
  }

  // .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
  if (this->has_record_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->record_key_, output);
  }

  // .google.privacy.dlp.v2beta1.FieldId field_id = 5;
  if (this->has_field_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->field_id_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Location)
  // .google.privacy.dlp.v2beta1.Range byte_range = 1;
  if (this->has_byte_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->byte_range_, false, target);
  }

  // .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
  if (this->has_codepoint_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->codepoint_range_, false, target);
  }

  // repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
  for (unsigned int i = 0, n = this->image_boxes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->image_boxes(i), false, target);
  }

  // .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
  if (this->has_record_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->record_key_, false, target);
  }

  // .google.privacy.dlp.v2beta1.FieldId field_id = 5;
  if (this->has_field_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->field_id_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Location)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
  {
    unsigned int count = this->image_boxes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_boxes(i));
    }
  }

  // .google.privacy.dlp.v2beta1.Range byte_range = 1;
  if (this->has_byte_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->byte_range_);
  }

  // .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
  if (this->has_codepoint_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->codepoint_range_);
  }

  // .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
  if (this->has_record_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->record_key_);
  }

  // .google.privacy.dlp.v2beta1.FieldId field_id = 5;
  if (this->has_field_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_boxes_.MergeFrom(from.image_boxes_);
  if (from.has_byte_range()) {
    mutable_byte_range()->::google::privacy::dlp::v2beta1::Range::MergeFrom(from.byte_range());
  }
  if (from.has_codepoint_range()) {
    mutable_codepoint_range()->::google::privacy::dlp::v2beta1::Range::MergeFrom(from.codepoint_range());
  }
  if (from.has_record_key()) {
    mutable_record_key()->::google::privacy::dlp::v2beta1::RecordKey::MergeFrom(from.record_key());
  }
  if (from.has_field_id()) {
    mutable_field_id()->::google::privacy::dlp::v2beta1::FieldId::MergeFrom(from.field_id());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  image_boxes_.UnsafeArenaSwap(&other->image_boxes_);
  std::swap(byte_range_, other->byte_range_);
  std::swap(codepoint_range_, other->codepoint_range_);
  std::swap(record_key_, other->record_key_);
  std::swap(field_id_, other->field_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// .google.privacy.dlp.v2beta1.Range byte_range = 1;
bool Location::has_byte_range() const {
  return this != internal_default_instance() && byte_range_ != NULL;
}
void Location::clear_byte_range() {
  if (GetArenaNoVirtual() == NULL && byte_range_ != NULL) delete byte_range_;
  byte_range_ = NULL;
}
const ::google::privacy::dlp::v2beta1::Range& Location::byte_range() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.byte_range)
  return byte_range_ != NULL ? *byte_range_
                         : *::google::privacy::dlp::v2beta1::Range::internal_default_instance();
}
::google::privacy::dlp::v2beta1::Range* Location::mutable_byte_range() {
  
  if (byte_range_ == NULL) {
    byte_range_ = new ::google::privacy::dlp::v2beta1::Range;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.byte_range)
  return byte_range_;
}
::google::privacy::dlp::v2beta1::Range* Location::release_byte_range() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.byte_range)
  
  ::google::privacy::dlp::v2beta1::Range* temp = byte_range_;
  byte_range_ = NULL;
  return temp;
}
void Location::set_allocated_byte_range(::google::privacy::dlp::v2beta1::Range* byte_range) {
  delete byte_range_;
  byte_range_ = byte_range;
  if (byte_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.byte_range)
}

// .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
bool Location::has_codepoint_range() const {
  return this != internal_default_instance() && codepoint_range_ != NULL;
}
void Location::clear_codepoint_range() {
  if (GetArenaNoVirtual() == NULL && codepoint_range_ != NULL) delete codepoint_range_;
  codepoint_range_ = NULL;
}
const ::google::privacy::dlp::v2beta1::Range& Location::codepoint_range() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.codepoint_range)
  return codepoint_range_ != NULL ? *codepoint_range_
                         : *::google::privacy::dlp::v2beta1::Range::internal_default_instance();
}
::google::privacy::dlp::v2beta1::Range* Location::mutable_codepoint_range() {
  
  if (codepoint_range_ == NULL) {
    codepoint_range_ = new ::google::privacy::dlp::v2beta1::Range;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.codepoint_range)
  return codepoint_range_;
}
::google::privacy::dlp::v2beta1::Range* Location::release_codepoint_range() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.codepoint_range)
  
  ::google::privacy::dlp::v2beta1::Range* temp = codepoint_range_;
  codepoint_range_ = NULL;
  return temp;
}
void Location::set_allocated_codepoint_range(::google::privacy::dlp::v2beta1::Range* codepoint_range) {
  delete codepoint_range_;
  codepoint_range_ = codepoint_range;
  if (codepoint_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.codepoint_range)
}

// repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
int Location::image_boxes_size() const {
  return image_boxes_.size();
}
void Location::clear_image_boxes() {
  image_boxes_.Clear();
}
const ::google::privacy::dlp::v2beta1::ImageLocation& Location::image_boxes(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_.Get(index);
}
::google::privacy::dlp::v2beta1::ImageLocation* Location::mutable_image_boxes(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_.Mutable(index);
}
::google::privacy::dlp::v2beta1::ImageLocation* Location::add_image_boxes() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ImageLocation >*
Location::mutable_image_boxes() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.Location.image_boxes)
  return &image_boxes_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ImageLocation >&
Location::image_boxes() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_;
}

// .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
bool Location::has_record_key() const {
  return this != internal_default_instance() && record_key_ != NULL;
}
void Location::clear_record_key() {
  if (GetArenaNoVirtual() == NULL && record_key_ != NULL) delete record_key_;
  record_key_ = NULL;
}
const ::google::privacy::dlp::v2beta1::RecordKey& Location::record_key() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.record_key)
  return record_key_ != NULL ? *record_key_
                         : *::google::privacy::dlp::v2beta1::RecordKey::internal_default_instance();
}
::google::privacy::dlp::v2beta1::RecordKey* Location::mutable_record_key() {
  
  if (record_key_ == NULL) {
    record_key_ = new ::google::privacy::dlp::v2beta1::RecordKey;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.record_key)
  return record_key_;
}
::google::privacy::dlp::v2beta1::RecordKey* Location::release_record_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.record_key)
  
  ::google::privacy::dlp::v2beta1::RecordKey* temp = record_key_;
  record_key_ = NULL;
  return temp;
}
void Location::set_allocated_record_key(::google::privacy::dlp::v2beta1::RecordKey* record_key) {
  delete record_key_;
  record_key_ = record_key;
  if (record_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.record_key)
}

// .google.privacy.dlp.v2beta1.FieldId field_id = 5;
bool Location::has_field_id() const {
  return this != internal_default_instance() && field_id_ != NULL;
}
void Location::clear_field_id() {
  if (GetArenaNoVirtual() == NULL && field_id_ != NULL) delete field_id_;
  field_id_ = NULL;
}
const ::google::privacy::dlp::v2beta1::FieldId& Location::field_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.field_id)
  return field_id_ != NULL ? *field_id_
                         : *::google::privacy::dlp::v2beta1::FieldId::internal_default_instance();
}
::google::privacy::dlp::v2beta1::FieldId* Location::mutable_field_id() {
  
  if (field_id_ == NULL) {
    field_id_ = new ::google::privacy::dlp::v2beta1::FieldId;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.field_id)
  return field_id_;
}
::google::privacy::dlp::v2beta1::FieldId* Location::release_field_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.field_id)
  
  ::google::privacy::dlp::v2beta1::FieldId* temp = field_id_;
  field_id_ = NULL;
  return temp;
}
void Location::set_allocated_field_id(::google::privacy::dlp::v2beta1::FieldId* field_id) {
  delete field_id_;
  field_id_ = field_id;
  if (field_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.field_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Range::kStartFieldNumber;
const int Range::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Range::Range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.Range)
}
Range::Range(const Range& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.Range)
}

void Range::SharedCtor() {
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
  _cached_size_ = 0;
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.Range)
  SharedDtor();
}

void Range::SharedDtor() {
}

void Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[5].descriptor;
}

const Range& Range::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

Range* Range::New(::google::protobuf::Arena* arena) const {
  Range* n = new Range;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.Range)
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.Range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.Range)
  return false;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.Range)
  // int64 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.Range)
}

::google::protobuf::uint8* Range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.Range)
  // int64 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start(), target);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.Range)
  size_t total_size = 0;

  // int64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const Range* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.Range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.Range)
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::Swap(Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Range::InternalSwap(Range* other) {
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Range

// int64 start = 1;
void Range::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Range::start() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Range.start)
  return start_;
}
void Range::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Range.start)
}

// int64 end = 2;
void Range::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Range::end() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Range.end)
  return end_;
}
void Range::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Range.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageLocation::kTopFieldNumber;
const int ImageLocation::kLeftFieldNumber;
const int ImageLocation::kWidthFieldNumber;
const int ImageLocation::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageLocation::ImageLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ImageLocation)
}
ImageLocation::ImageLocation(const ImageLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&top_, &from.top_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&top_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ImageLocation)
}

void ImageLocation::SharedCtor() {
  ::memset(&top_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&top_) + sizeof(height_));
  _cached_size_ = 0;
}

ImageLocation::~ImageLocation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ImageLocation)
  SharedDtor();
}

void ImageLocation::SharedDtor() {
}

void ImageLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageLocation::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[6].descriptor;
}

const ImageLocation& ImageLocation::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageLocation* ImageLocation::New(::google::protobuf::Arena* arena) const {
  ImageLocation* n = new ImageLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ImageLocation)
  ::memset(&top_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&top_) + sizeof(height_));
}

bool ImageLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ImageLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 top = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ImageLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ImageLocation)
  return false;
#undef DO_
}

void ImageLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ImageLocation)
  // int32 top = 1;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->top(), output);
  }

  // int32 left = 2;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left(), output);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ImageLocation)
}

::google::protobuf::uint8* ImageLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ImageLocation)
  // int32 top = 1;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->top(), target);
  }

  // int32 left = 2;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left(), target);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ImageLocation)
  return target;
}

size_t ImageLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ImageLocation)
  size_t total_size = 0;

  // int32 top = 1;
  if (this->top() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top());
  }

  // int32 left = 2;
  if (this->left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ImageLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ImageLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ImageLocation)
    MergeFrom(*source);
  }
}

void ImageLocation::MergeFrom(const ImageLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ImageLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void ImageLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ImageLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageLocation::CopyFrom(const ImageLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ImageLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageLocation::IsInitialized() const {
  return true;
}

void ImageLocation::Swap(ImageLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageLocation::InternalSwap(ImageLocation* other) {
  std::swap(top_, other->top_);
  std::swap(left_, other->left_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageLocation::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageLocation

// int32 top = 1;
void ImageLocation::clear_top() {
  top_ = 0;
}
::google::protobuf::int32 ImageLocation::top() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.top)
  return top_;
}
void ImageLocation::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.top)
}

// int32 left = 2;
void ImageLocation::clear_left() {
  left_ = 0;
}
::google::protobuf::int32 ImageLocation::left() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.left)
  return left_;
}
void ImageLocation::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.left)
}

// int32 width = 3;
void ImageLocation::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 ImageLocation::width() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.width)
  return width_;
}
void ImageLocation::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.width)
}

// int32 height = 4;
void ImageLocation::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 ImageLocation::height() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.height)
  return height_;
}
void ImageLocation::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedactContentRequest_ReplaceConfig::kInfoTypeFieldNumber;
const int RedactContentRequest_ReplaceConfig::kReplaceWithFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactContentRequest_ReplaceConfig::RedactContentRequest_ReplaceConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
}
RedactContentRequest_ReplaceConfig::RedactContentRequest_ReplaceConfig(const RedactContentRequest_ReplaceConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replace_with_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.replace_with().size() > 0) {
    replace_with_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replace_with_);
  }
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType(*from.info_type_);
  } else {
    info_type_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
}

void RedactContentRequest_ReplaceConfig::SharedCtor() {
  replace_with_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_type_ = NULL;
  _cached_size_ = 0;
}

RedactContentRequest_ReplaceConfig::~RedactContentRequest_ReplaceConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  SharedDtor();
}

void RedactContentRequest_ReplaceConfig::SharedDtor() {
  replace_with_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete info_type_;
  }
}

void RedactContentRequest_ReplaceConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedactContentRequest_ReplaceConfig::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[7].descriptor;
}

const RedactContentRequest_ReplaceConfig& RedactContentRequest_ReplaceConfig::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedactContentRequest_ReplaceConfig* RedactContentRequest_ReplaceConfig::New(::google::protobuf::Arena* arena) const {
  RedactContentRequest_ReplaceConfig* n = new RedactContentRequest_ReplaceConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedactContentRequest_ReplaceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  replace_with_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
}

bool RedactContentRequest_ReplaceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string replace_with = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replace_with()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->replace_with().data(), this->replace_with().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  return false;
#undef DO_
}

void RedactContentRequest_ReplaceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_type_, output);
  }

  // string replace_with = 2;
  if (this->replace_with().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->replace_with().data(), this->replace_with().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->replace_with(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
}

::google::protobuf::uint8* RedactContentRequest_ReplaceConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_type_, false, target);
  }

  // string replace_with = 2;
  if (this->replace_with().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->replace_with().data(), this->replace_with().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->replace_with(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  return target;
}

size_t RedactContentRequest_ReplaceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  size_t total_size = 0;

  // string replace_with = 2;
  if (this->replace_with().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->replace_with());
  }

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_type_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedactContentRequest_ReplaceConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactContentRequest_ReplaceConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedactContentRequest_ReplaceConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
    MergeFrom(*source);
  }
}

void RedactContentRequest_ReplaceConfig::MergeFrom(const RedactContentRequest_ReplaceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.replace_with().size() > 0) {

    replace_with_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replace_with_);
  }
  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
  }
}

void RedactContentRequest_ReplaceConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactContentRequest_ReplaceConfig::CopyFrom(const RedactContentRequest_ReplaceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactContentRequest_ReplaceConfig::IsInitialized() const {
  return true;
}

void RedactContentRequest_ReplaceConfig::Swap(RedactContentRequest_ReplaceConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactContentRequest_ReplaceConfig::InternalSwap(RedactContentRequest_ReplaceConfig* other) {
  replace_with_.Swap(&other->replace_with_);
  std::swap(info_type_, other->info_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedactContentRequest_ReplaceConfig::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedactContentRequest_ReplaceConfig

// .google.privacy.dlp.v2beta1.InfoType info_type = 1;
bool RedactContentRequest_ReplaceConfig::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
void RedactContentRequest_ReplaceConfig::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) delete info_type_;
  info_type_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InfoType& RedactContentRequest_ReplaceConfig::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
  return info_type_ != NULL ? *info_type_
                         : *::google::privacy::dlp::v2beta1::InfoType::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InfoType* RedactContentRequest_ReplaceConfig::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
  return info_type_;
}
::google::privacy::dlp::v2beta1::InfoType* RedactContentRequest_ReplaceConfig::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
void RedactContentRequest_ReplaceConfig::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  delete info_type_;
  info_type_ = info_type;
  if (info_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
}

// string replace_with = 2;
void RedactContentRequest_ReplaceConfig::clear_replace_with() {
  replace_with_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RedactContentRequest_ReplaceConfig::replace_with() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
  return replace_with_.GetNoArena();
}
void RedactContentRequest_ReplaceConfig::set_replace_with(const ::std::string& value) {
  
  replace_with_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
#if LANG_CXX11
void RedactContentRequest_ReplaceConfig::set_replace_with(::std::string&& value) {
  
  replace_with_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
#endif
void RedactContentRequest_ReplaceConfig::set_replace_with(const char* value) {
  
  replace_with_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
void RedactContentRequest_ReplaceConfig::set_replace_with(const char* value, size_t size) {
  
  replace_with_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
::std::string* RedactContentRequest_ReplaceConfig::mutable_replace_with() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
  return replace_with_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedactContentRequest_ReplaceConfig::release_replace_with() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
  
  return replace_with_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedactContentRequest_ReplaceConfig::set_allocated_replace_with(::std::string* replace_with) {
  if (replace_with != NULL) {
    
  } else {
    
  }
  replace_with_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replace_with);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedactContentRequest::kInspectConfigFieldNumber;
const int RedactContentRequest::kItemsFieldNumber;
const int RedactContentRequest::kReplaceConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactContentRequest::RedactContentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RedactContentRequest)
}
RedactContentRequest::RedactContentRequest(const RedactContentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      replace_configs_(from.replace_configs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RedactContentRequest)
}

void RedactContentRequest::SharedCtor() {
  inspect_config_ = NULL;
  _cached_size_ = 0;
}

RedactContentRequest::~RedactContentRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RedactContentRequest)
  SharedDtor();
}

void RedactContentRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete inspect_config_;
  }
}

void RedactContentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedactContentRequest::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[8].descriptor;
}

const RedactContentRequest& RedactContentRequest::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedactContentRequest* RedactContentRequest::New(::google::protobuf::Arena* arena) const {
  RedactContentRequest* n = new RedactContentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedactContentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  items_.Clear();
  replace_configs_.Clear();
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
}

bool RedactContentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_replace_configs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RedactContentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RedactContentRequest)
  return false;
#undef DO_
}

void RedactContentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->inspect_config_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
  for (unsigned int i = 0, n = this->replace_configs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->replace_configs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RedactContentRequest)
}

::google::protobuf::uint8* RedactContentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->inspect_config_, false, target);
  }

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->items(i), false, target);
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
  for (unsigned int i = 0, n = this->replace_configs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->replace_configs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RedactContentRequest)
  return target;
}

size_t RedactContentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
  {
    unsigned int count = this->replace_configs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replace_configs(i));
    }
  }

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inspect_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedactContentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactContentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedactContentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RedactContentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RedactContentRequest)
    MergeFrom(*source);
  }
}

void RedactContentRequest::MergeFrom(const RedactContentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  items_.MergeFrom(from.items_);
  replace_configs_.MergeFrom(from.replace_configs_);
  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2beta1::InspectConfig::MergeFrom(from.inspect_config());
  }
}

void RedactContentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactContentRequest::CopyFrom(const RedactContentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RedactContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactContentRequest::IsInitialized() const {
  return true;
}

void RedactContentRequest::Swap(RedactContentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactContentRequest::InternalSwap(RedactContentRequest* other) {
  items_.UnsafeArenaSwap(&other->items_);
  replace_configs_.UnsafeArenaSwap(&other->replace_configs_);
  std::swap(inspect_config_, other->inspect_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedactContentRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedactContentRequest

// .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
bool RedactContentRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
void RedactContentRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) delete inspect_config_;
  inspect_config_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InspectConfig& RedactContentRequest::inspect_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
  return inspect_config_ != NULL ? *inspect_config_
                         : *::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InspectConfig* RedactContentRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
  return inspect_config_;
}
::google::privacy::dlp::v2beta1::InspectConfig* RedactContentRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
void RedactContentRequest::set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config) {
  delete inspect_config_;
  inspect_config_ = inspect_config;
  if (inspect_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
}

// repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
int RedactContentRequest::items_size() const {
  return items_.size();
}
void RedactContentRequest::clear_items() {
  items_.Clear();
}
const ::google::privacy::dlp::v2beta1::ContentItem& RedactContentRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_.Get(index);
}
::google::privacy::dlp::v2beta1::ContentItem* RedactContentRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_.Mutable(index);
}
::google::privacy::dlp::v2beta1::ContentItem* RedactContentRequest::add_items() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
RedactContentRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
RedactContentRequest::items() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_;
}

// repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
int RedactContentRequest::replace_configs_size() const {
  return replace_configs_.size();
}
void RedactContentRequest::clear_replace_configs() {
  replace_configs_.Clear();
}
const ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig& RedactContentRequest::replace_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_.Get(index);
}
::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig* RedactContentRequest::mutable_replace_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_.Mutable(index);
}
::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig* RedactContentRequest::add_replace_configs() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig >*
RedactContentRequest::mutable_replace_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return &replace_configs_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig >&
RedactContentRequest::replace_configs() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedactContentResponse::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactContentResponse::RedactContentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.RedactContentResponse)
}
RedactContentResponse::RedactContentResponse(const RedactContentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.RedactContentResponse)
}

void RedactContentResponse::SharedCtor() {
  _cached_size_ = 0;
}

RedactContentResponse::~RedactContentResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.RedactContentResponse)
  SharedDtor();
}

void RedactContentResponse::SharedDtor() {
}

void RedactContentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedactContentResponse::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[9].descriptor;
}

const RedactContentResponse& RedactContentResponse::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedactContentResponse* RedactContentResponse::New(::google::protobuf::Arena* arena) const {
  RedactContentResponse* n = new RedactContentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedactContentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  items_.Clear();
}

bool RedactContentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.RedactContentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.RedactContentResponse)
  return false;
#undef DO_
}

void RedactContentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.RedactContentResponse)
}

::google::protobuf::uint8* RedactContentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.RedactContentResponse)
  return target;
}

size_t RedactContentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedactContentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactContentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedactContentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.RedactContentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.RedactContentResponse)
    MergeFrom(*source);
  }
}

void RedactContentResponse::MergeFrom(const RedactContentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  items_.MergeFrom(from.items_);
}

void RedactContentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactContentResponse::CopyFrom(const RedactContentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.RedactContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactContentResponse::IsInitialized() const {
  return true;
}

void RedactContentResponse::Swap(RedactContentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactContentResponse::InternalSwap(RedactContentResponse* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedactContentResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedactContentResponse

// repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
int RedactContentResponse::items_size() const {
  return items_.size();
}
void RedactContentResponse::clear_items() {
  items_.Clear();
}
const ::google::privacy::dlp::v2beta1::ContentItem& RedactContentResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_.Get(index);
}
::google::privacy::dlp::v2beta1::ContentItem* RedactContentResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_.Mutable(index);
}
::google::privacy::dlp::v2beta1::ContentItem* RedactContentResponse::add_items() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
RedactContentResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
RedactContentResponse::items() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectContentRequest::kInspectConfigFieldNumber;
const int InspectContentRequest::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectContentRequest::InspectContentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectContentRequest)
}
InspectContentRequest::InspectContentRequest(const InspectContentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectContentRequest)
}

void InspectContentRequest::SharedCtor() {
  inspect_config_ = NULL;
  _cached_size_ = 0;
}

InspectContentRequest::~InspectContentRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectContentRequest)
  SharedDtor();
}

void InspectContentRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete inspect_config_;
  }
}

void InspectContentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectContentRequest::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[10].descriptor;
}

const InspectContentRequest& InspectContentRequest::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InspectContentRequest* InspectContentRequest::New(::google::protobuf::Arena* arena) const {
  InspectContentRequest* n = new InspectContentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectContentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  items_.Clear();
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
}

bool InspectContentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectContentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectContentRequest)
  return false;
#undef DO_
}

void InspectContentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->inspect_config_, output);
  }

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectContentRequest)
}

::google::protobuf::uint8* InspectContentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->inspect_config_, false, target);
  }

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->items(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectContentRequest)
  return target;
}

size_t InspectContentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inspect_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectContentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectContentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectContentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectContentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectContentRequest)
    MergeFrom(*source);
  }
}

void InspectContentRequest::MergeFrom(const InspectContentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  items_.MergeFrom(from.items_);
  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2beta1::InspectConfig::MergeFrom(from.inspect_config());
  }
}

void InspectContentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectContentRequest::CopyFrom(const InspectContentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectContentRequest::IsInitialized() const {
  return true;
}

void InspectContentRequest::Swap(InspectContentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectContentRequest::InternalSwap(InspectContentRequest* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(inspect_config_, other->inspect_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectContentRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InspectContentRequest

// .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
bool InspectContentRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
void InspectContentRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) delete inspect_config_;
  inspect_config_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InspectConfig& InspectContentRequest::inspect_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
  return inspect_config_ != NULL ? *inspect_config_
                         : *::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InspectConfig* InspectContentRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
  return inspect_config_;
}
::google::privacy::dlp::v2beta1::InspectConfig* InspectContentRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
void InspectContentRequest::set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config) {
  delete inspect_config_;
  inspect_config_ = inspect_config;
  if (inspect_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
}

// repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
int InspectContentRequest::items_size() const {
  return items_.size();
}
void InspectContentRequest::clear_items() {
  items_.Clear();
}
const ::google::privacy::dlp::v2beta1::ContentItem& InspectContentRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_.Get(index);
}
::google::privacy::dlp::v2beta1::ContentItem* InspectContentRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_.Mutable(index);
}
::google::privacy::dlp::v2beta1::ContentItem* InspectContentRequest::add_items() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
InspectContentRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
InspectContentRequest::items() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectContentResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectContentResponse::InspectContentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectContentResponse)
}
InspectContentResponse::InspectContentResponse(const InspectContentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectContentResponse)
}

void InspectContentResponse::SharedCtor() {
  _cached_size_ = 0;
}

InspectContentResponse::~InspectContentResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectContentResponse)
  SharedDtor();
}

void InspectContentResponse::SharedDtor() {
}

void InspectContentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectContentResponse::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[11].descriptor;
}

const InspectContentResponse& InspectContentResponse::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InspectContentResponse* InspectContentResponse::New(::google::protobuf::Arena* arena) const {
  InspectContentResponse* n = new InspectContentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectContentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  results_.Clear();
}

bool InspectContentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectContentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectContentResponse)
  return false;
#undef DO_
}

void InspectContentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  // repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectContentResponse)
}

::google::protobuf::uint8* InspectContentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  // repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->results(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectContentResponse)
  return target;
}

size_t InspectContentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectContentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectContentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectContentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectContentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectContentResponse)
    MergeFrom(*source);
  }
}

void InspectContentResponse::MergeFrom(const InspectContentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  results_.MergeFrom(from.results_);
}

void InspectContentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectContentResponse::CopyFrom(const InspectContentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectContentResponse::IsInitialized() const {
  return true;
}

void InspectContentResponse::Swap(InspectContentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectContentResponse::InternalSwap(InspectContentResponse* other) {
  results_.UnsafeArenaSwap(&other->results_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectContentResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InspectContentResponse

// repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
int InspectContentResponse::results_size() const {
  return results_.size();
}
void InspectContentResponse::clear_results() {
  results_.Clear();
}
const ::google::privacy::dlp::v2beta1::InspectResult& InspectContentResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_.Get(index);
}
::google::privacy::dlp::v2beta1::InspectResult* InspectContentResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_.Mutable(index);
}
::google::privacy::dlp::v2beta1::InspectResult* InspectContentResponse::add_results() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectResult >*
InspectContentResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectResult >&
InspectContentResponse::results() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateInspectOperationRequest::kInspectConfigFieldNumber;
const int CreateInspectOperationRequest::kStorageConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateInspectOperationRequest::CreateInspectOperationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
}
CreateInspectOperationRequest::CreateInspectOperationRequest(const CreateInspectOperationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = NULL;
  }
  if (from.has_storage_config()) {
    storage_config_ = new ::google::privacy::dlp::v2beta1::StorageConfig(*from.storage_config_);
  } else {
    storage_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
}

void CreateInspectOperationRequest::SharedCtor() {
  ::memset(&inspect_config_, 0, reinterpret_cast<char*>(&storage_config_) -
    reinterpret_cast<char*>(&inspect_config_) + sizeof(storage_config_));
  _cached_size_ = 0;
}

CreateInspectOperationRequest::~CreateInspectOperationRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  SharedDtor();
}

void CreateInspectOperationRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete inspect_config_;
  }
  if (this != internal_default_instance()) {
    delete storage_config_;
  }
}

void CreateInspectOperationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateInspectOperationRequest::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[12].descriptor;
}

const CreateInspectOperationRequest& CreateInspectOperationRequest::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateInspectOperationRequest* CreateInspectOperationRequest::New(::google::protobuf::Arena* arena) const {
  CreateInspectOperationRequest* n = new CreateInspectOperationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateInspectOperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) {
    delete inspect_config_;
  }
  inspect_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && storage_config_ != NULL) {
    delete storage_config_;
  }
  storage_config_ = NULL;
}

bool CreateInspectOperationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  return false;
#undef DO_
}

void CreateInspectOperationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->inspect_config_, output);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
  if (this->has_storage_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->storage_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
}

::google::protobuf::uint8* CreateInspectOperationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->inspect_config_, false, target);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
  if (this->has_storage_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->storage_config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  return target;
}

size_t CreateInspectOperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  size_t total_size = 0;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inspect_config_);
  }

  // .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
  if (this->has_storage_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->storage_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateInspectOperationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateInspectOperationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateInspectOperationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
    MergeFrom(*source);
  }
}

void CreateInspectOperationRequest::MergeFrom(const CreateInspectOperationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2beta1::InspectConfig::MergeFrom(from.inspect_config());
  }
  if (from.has_storage_config()) {
    mutable_storage_config()->::google::privacy::dlp::v2beta1::StorageConfig::MergeFrom(from.storage_config());
  }
}

void CreateInspectOperationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateInspectOperationRequest::CopyFrom(const CreateInspectOperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInspectOperationRequest::IsInitialized() const {
  return true;
}

void CreateInspectOperationRequest::Swap(CreateInspectOperationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateInspectOperationRequest::InternalSwap(CreateInspectOperationRequest* other) {
  std::swap(inspect_config_, other->inspect_config_);
  std::swap(storage_config_, other->storage_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateInspectOperationRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateInspectOperationRequest

// .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
bool CreateInspectOperationRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
void CreateInspectOperationRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) delete inspect_config_;
  inspect_config_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InspectConfig& CreateInspectOperationRequest::inspect_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
  return inspect_config_ != NULL ? *inspect_config_
                         : *::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InspectConfig* CreateInspectOperationRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
  return inspect_config_;
}
::google::privacy::dlp::v2beta1::InspectConfig* CreateInspectOperationRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
void CreateInspectOperationRequest::set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config) {
  delete inspect_config_;
  inspect_config_ = inspect_config;
  if (inspect_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
}

// .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
bool CreateInspectOperationRequest::has_storage_config() const {
  return this != internal_default_instance() && storage_config_ != NULL;
}
void CreateInspectOperationRequest::clear_storage_config() {
  if (GetArenaNoVirtual() == NULL && storage_config_ != NULL) delete storage_config_;
  storage_config_ = NULL;
}
const ::google::privacy::dlp::v2beta1::StorageConfig& CreateInspectOperationRequest::storage_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
  return storage_config_ != NULL ? *storage_config_
                         : *::google::privacy::dlp::v2beta1::StorageConfig::internal_default_instance();
}
::google::privacy::dlp::v2beta1::StorageConfig* CreateInspectOperationRequest::mutable_storage_config() {
  
  if (storage_config_ == NULL) {
    storage_config_ = new ::google::privacy::dlp::v2beta1::StorageConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
  return storage_config_;
}
::google::privacy::dlp::v2beta1::StorageConfig* CreateInspectOperationRequest::release_storage_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
  
  ::google::privacy::dlp::v2beta1::StorageConfig* temp = storage_config_;
  storage_config_ = NULL;
  return temp;
}
void CreateInspectOperationRequest::set_allocated_storage_config(::google::privacy::dlp::v2beta1::StorageConfig* storage_config) {
  delete storage_config_;
  storage_config_ = storage_config;
  if (storage_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoTypeStatistics::kInfoTypeFieldNumber;
const int InfoTypeStatistics::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoTypeStatistics::InfoTypeStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InfoTypeStatistics)
}
InfoTypeStatistics::InfoTypeStatistics(const InfoTypeStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType(*from.info_type_);
  } else {
    info_type_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InfoTypeStatistics)
}

void InfoTypeStatistics::SharedCtor() {
  ::memset(&info_type_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&info_type_) + sizeof(count_));
  _cached_size_ = 0;
}

InfoTypeStatistics::~InfoTypeStatistics() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  SharedDtor();
}

void InfoTypeStatistics::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_type_;
  }
}

void InfoTypeStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoTypeStatistics::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[13].descriptor;
}

const InfoTypeStatistics& InfoTypeStatistics::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfoTypeStatistics* InfoTypeStatistics::New(::google::protobuf::Arena* arena) const {
  InfoTypeStatistics* n = new InfoTypeStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoTypeStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) {
    delete info_type_;
  }
  info_type_ = NULL;
  count_ = GOOGLE_LONGLONG(0);
}

bool InfoTypeStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 count = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  return false;
#undef DO_
}

void InfoTypeStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_type_, output);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InfoTypeStatistics)
}

::google::protobuf::uint8* InfoTypeStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_type_, false, target);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  return target;
}

size_t InfoTypeStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  size_t total_size = 0;

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_type_);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoTypeStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoTypeStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoTypeStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InfoTypeStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InfoTypeStatistics)
    MergeFrom(*source);
  }
}

void InfoTypeStatistics::MergeFrom(const InfoTypeStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2beta1::InfoType::MergeFrom(from.info_type());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void InfoTypeStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoTypeStatistics::CopyFrom(const InfoTypeStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoTypeStatistics::IsInitialized() const {
  return true;
}

void InfoTypeStatistics::Swap(InfoTypeStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoTypeStatistics::InternalSwap(InfoTypeStatistics* other) {
  std::swap(info_type_, other->info_type_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoTypeStatistics::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfoTypeStatistics

// .google.privacy.dlp.v2beta1.InfoType info_type = 1;
bool InfoTypeStatistics::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
void InfoTypeStatistics::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) delete info_type_;
  info_type_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InfoType& InfoTypeStatistics::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
  return info_type_ != NULL ? *info_type_
                         : *::google::privacy::dlp::v2beta1::InfoType::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InfoType* InfoTypeStatistics::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
  return info_type_;
}
::google::privacy::dlp::v2beta1::InfoType* InfoTypeStatistics::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
void InfoTypeStatistics::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  delete info_type_;
  info_type_ = info_type;
  if (info_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
}

// int64 count = 2;
void InfoTypeStatistics::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 InfoTypeStatistics::count() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeStatistics.count)
  return count_;
}
void InfoTypeStatistics::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InfoTypeStatistics.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectOperationMetadata::kProcessedBytesFieldNumber;
const int InspectOperationMetadata::kTotalEstimatedBytesFieldNumber;
const int InspectOperationMetadata::kInfoTypeStatsFieldNumber;
const int InspectOperationMetadata::kCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectOperationMetadata::InspectOperationMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectOperationMetadata)
}
InspectOperationMetadata::InspectOperationMetadata(const InspectOperationMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_type_stats_(from.info_type_stats_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = NULL;
  }
  ::memcpy(&processed_bytes_, &from.processed_bytes_,
    reinterpret_cast<char*>(&total_estimated_bytes_) -
    reinterpret_cast<char*>(&processed_bytes_) + sizeof(total_estimated_bytes_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectOperationMetadata)
}

void InspectOperationMetadata::SharedCtor() {
  ::memset(&create_time_, 0, reinterpret_cast<char*>(&total_estimated_bytes_) -
    reinterpret_cast<char*>(&create_time_) + sizeof(total_estimated_bytes_));
  _cached_size_ = 0;
}

InspectOperationMetadata::~InspectOperationMetadata() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  SharedDtor();
}

void InspectOperationMetadata::SharedDtor() {
  if (this != internal_default_instance()) {
    delete create_time_;
  }
}

void InspectOperationMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectOperationMetadata::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[14].descriptor;
}

const InspectOperationMetadata& InspectOperationMetadata::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InspectOperationMetadata* InspectOperationMetadata::New(::google::protobuf::Arena* arena) const {
  InspectOperationMetadata* n = new InspectOperationMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectOperationMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  info_type_stats_.Clear();
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) {
    delete create_time_;
  }
  create_time_ = NULL;
  ::memset(&processed_bytes_, 0, reinterpret_cast<char*>(&total_estimated_bytes_) -
    reinterpret_cast<char*>(&processed_bytes_) + sizeof(total_estimated_bytes_));
}

bool InspectOperationMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 processed_bytes = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processed_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_info_type_stats()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .google.protobuf.Timestamp create_time = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_estimated_bytes = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_estimated_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  return false;
#undef DO_
}

void InspectOperationMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  // int64 processed_bytes = 1;
  if (this->processed_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->processed_bytes(), output);
  }

  // repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
  for (unsigned int i = 0, n = this->info_type_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info_type_stats(i), output);
  }

  // .google.protobuf.Timestamp create_time = 3;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->create_time_, output);
  }

  // int64 total_estimated_bytes = 4;
  if (this->total_estimated_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_estimated_bytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectOperationMetadata)
}

::google::protobuf::uint8* InspectOperationMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  // int64 processed_bytes = 1;
  if (this->processed_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->processed_bytes(), target);
  }

  // repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
  for (unsigned int i = 0, n = this->info_type_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->info_type_stats(i), false, target);
  }

  // .google.protobuf.Timestamp create_time = 3;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->create_time_, false, target);
  }

  // int64 total_estimated_bytes = 4;
  if (this->total_estimated_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_estimated_bytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  return target;
}

size_t InspectOperationMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
  {
    unsigned int count = this->info_type_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_type_stats(i));
    }
  }

  // .google.protobuf.Timestamp create_time = 3;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_time_);
  }

  // int64 processed_bytes = 1;
  if (this->processed_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processed_bytes());
  }

  // int64 total_estimated_bytes = 4;
  if (this->total_estimated_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_estimated_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectOperationMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectOperationMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectOperationMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectOperationMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectOperationMetadata)
    MergeFrom(*source);
  }
}

void InspectOperationMetadata::MergeFrom(const InspectOperationMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_type_stats_.MergeFrom(from.info_type_stats_);
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.processed_bytes() != 0) {
    set_processed_bytes(from.processed_bytes());
  }
  if (from.total_estimated_bytes() != 0) {
    set_total_estimated_bytes(from.total_estimated_bytes());
  }
}

void InspectOperationMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectOperationMetadata::CopyFrom(const InspectOperationMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectOperationMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectOperationMetadata::IsInitialized() const {
  return true;
}

void InspectOperationMetadata::Swap(InspectOperationMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectOperationMetadata::InternalSwap(InspectOperationMetadata* other) {
  info_type_stats_.UnsafeArenaSwap(&other->info_type_stats_);
  std::swap(create_time_, other->create_time_);
  std::swap(processed_bytes_, other->processed_bytes_);
  std::swap(total_estimated_bytes_, other->total_estimated_bytes_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectOperationMetadata::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InspectOperationMetadata

// int64 processed_bytes = 1;
void InspectOperationMetadata::clear_processed_bytes() {
  processed_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 InspectOperationMetadata::processed_bytes() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.processed_bytes)
  return processed_bytes_;
}
void InspectOperationMetadata::set_processed_bytes(::google::protobuf::int64 value) {
  
  processed_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectOperationMetadata.processed_bytes)
}

// int64 total_estimated_bytes = 4;
void InspectOperationMetadata::clear_total_estimated_bytes() {
  total_estimated_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 InspectOperationMetadata::total_estimated_bytes() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.total_estimated_bytes)
  return total_estimated_bytes_;
}
void InspectOperationMetadata::set_total_estimated_bytes(::google::protobuf::int64 value) {
  
  total_estimated_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectOperationMetadata.total_estimated_bytes)
}

// repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
int InspectOperationMetadata::info_type_stats_size() const {
  return info_type_stats_.size();
}
void InspectOperationMetadata::clear_info_type_stats() {
  info_type_stats_.Clear();
}
const ::google::privacy::dlp::v2beta1::InfoTypeStatistics& InspectOperationMetadata::info_type_stats(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_.Get(index);
}
::google::privacy::dlp::v2beta1::InfoTypeStatistics* InspectOperationMetadata::mutable_info_type_stats(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_.Mutable(index);
}
::google::privacy::dlp::v2beta1::InfoTypeStatistics* InspectOperationMetadata::add_info_type_stats() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeStatistics >*
InspectOperationMetadata::mutable_info_type_stats() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return &info_type_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeStatistics >&
InspectOperationMetadata::info_type_stats() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_;
}

// .google.protobuf.Timestamp create_time = 3;
bool InspectOperationMetadata::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
void InspectOperationMetadata::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
const ::google::protobuf::Timestamp& InspectOperationMetadata::create_time() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* InspectOperationMetadata::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
  return create_time_;
}
::google::protobuf::Timestamp* InspectOperationMetadata::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
void InspectOperationMetadata::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectOperationResult::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectOperationResult::InspectOperationResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InspectOperationResult)
}
InspectOperationResult::InspectOperationResult(const InspectOperationResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InspectOperationResult)
}

void InspectOperationResult::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

InspectOperationResult::~InspectOperationResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InspectOperationResult)
  SharedDtor();
}

void InspectOperationResult::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InspectOperationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InspectOperationResult::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[15].descriptor;
}

const InspectOperationResult& InspectOperationResult::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InspectOperationResult* InspectOperationResult::New(::google::protobuf::Arena* arena) const {
  InspectOperationResult* n = new InspectOperationResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InspectOperationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InspectOperationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.InspectOperationResult.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InspectOperationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InspectOperationResult)
  return false;
#undef DO_
}

void InspectOperationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InspectOperationResult.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InspectOperationResult)
}

::google::protobuf::uint8* InspectOperationResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InspectOperationResult.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InspectOperationResult)
  return target;
}

size_t InspectOperationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InspectOperationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectOperationResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InspectOperationResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InspectOperationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InspectOperationResult)
    MergeFrom(*source);
  }
}

void InspectOperationResult::MergeFrom(const InspectOperationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void InspectOperationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectOperationResult::CopyFrom(const InspectOperationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InspectOperationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectOperationResult::IsInitialized() const {
  return true;
}

void InspectOperationResult::Swap(InspectOperationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectOperationResult::InternalSwap(InspectOperationResult* other) {
  name_.Swap(&other->name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InspectOperationResult::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InspectOperationResult

// string name = 1;
void InspectOperationResult::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InspectOperationResult::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationResult.name)
  return name_.GetNoArena();
}
void InspectOperationResult::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
#if LANG_CXX11
void InspectOperationResult::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
#endif
void InspectOperationResult::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
void InspectOperationResult::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
::std::string* InspectOperationResult::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationResult.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InspectOperationResult::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectOperationResult.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InspectOperationResult::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInspectFindingsRequest::kNameFieldNumber;
const int ListInspectFindingsRequest::kPageSizeFieldNumber;
const int ListInspectFindingsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInspectFindingsRequest::ListInspectFindingsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
}
ListInspectFindingsRequest::ListInspectFindingsRequest(const ListInspectFindingsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
}

void ListInspectFindingsRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListInspectFindingsRequest::~ListInspectFindingsRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  SharedDtor();
}

void ListInspectFindingsRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListInspectFindingsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInspectFindingsRequest::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[16].descriptor;
}

const ListInspectFindingsRequest& ListInspectFindingsRequest::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListInspectFindingsRequest* ListInspectFindingsRequest::New(::google::protobuf::Arena* arena) const {
  ListInspectFindingsRequest* n = new ListInspectFindingsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInspectFindingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

bool ListInspectFindingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), this->page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  return false;
#undef DO_
}

void ListInspectFindingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
}

::google::protobuf::uint8* ListInspectFindingsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), this->page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  return target;
}

size_t ListInspectFindingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInspectFindingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInspectFindingsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInspectFindingsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
    MergeFrom(*source);
  }
}

void ListInspectFindingsRequest::MergeFrom(const ListInspectFindingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListInspectFindingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInspectFindingsRequest::CopyFrom(const ListInspectFindingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInspectFindingsRequest::IsInitialized() const {
  return true;
}

void ListInspectFindingsRequest::Swap(ListInspectFindingsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInspectFindingsRequest::InternalSwap(ListInspectFindingsRequest* other) {
  name_.Swap(&other->name_);
  page_token_.Swap(&other->page_token_);
  std::swap(page_size_, other->page_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInspectFindingsRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListInspectFindingsRequest

// string name = 1;
void ListInspectFindingsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListInspectFindingsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
  return name_.GetNoArena();
}
void ListInspectFindingsRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
#if LANG_CXX11
void ListInspectFindingsRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
#endif
void ListInspectFindingsRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
void ListInspectFindingsRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
::std::string* ListInspectFindingsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListInspectFindingsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListInspectFindingsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}

// int32 page_size = 2;
void ListInspectFindingsRequest::clear_page_size() {
  page_size_ = 0;
}
::google::protobuf::int32 ListInspectFindingsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_size)
  return page_size_;
}
void ListInspectFindingsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_size)
}

// string page_token = 3;
void ListInspectFindingsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListInspectFindingsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
  return page_token_.GetNoArena();
}
void ListInspectFindingsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
#if LANG_CXX11
void ListInspectFindingsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
#endif
void ListInspectFindingsRequest::set_page_token(const char* value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
void ListInspectFindingsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
::std::string* ListInspectFindingsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListInspectFindingsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListInspectFindingsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInspectFindingsResponse::kResultFieldNumber;
const int ListInspectFindingsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInspectFindingsResponse::ListInspectFindingsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
}
ListInspectFindingsResponse::ListInspectFindingsResponse(const ListInspectFindingsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  if (from.has_result()) {
    result_ = new ::google::privacy::dlp::v2beta1::InspectResult(*from.result_);
  } else {
    result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
}

void ListInspectFindingsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = NULL;
  _cached_size_ = 0;
}

ListInspectFindingsResponse::~ListInspectFindingsResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  SharedDtor();
}

void ListInspectFindingsResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete result_;
  }
}

void ListInspectFindingsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInspectFindingsResponse::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[17].descriptor;
}

const ListInspectFindingsResponse& ListInspectFindingsResponse::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListInspectFindingsResponse* ListInspectFindingsResponse::New(::google::protobuf::Arena* arena) const {
  ListInspectFindingsResponse* n = new ListInspectFindingsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInspectFindingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}

bool ListInspectFindingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2beta1.InspectResult result = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), this->next_page_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  return false;
#undef DO_
}

void ListInspectFindingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  // .google.privacy.dlp.v2beta1.InspectResult result = 1;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
}

::google::protobuf::uint8* ListInspectFindingsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  // .google.privacy.dlp.v2beta1.InspectResult result = 1;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->result_, false, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), this->next_page_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  return target;
}

size_t ListInspectFindingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  size_t total_size = 0;

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  // .google.privacy.dlp.v2beta1.InspectResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInspectFindingsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInspectFindingsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInspectFindingsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
    MergeFrom(*source);
  }
}

void ListInspectFindingsResponse::MergeFrom(const ListInspectFindingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  if (from.has_result()) {
    mutable_result()->::google::privacy::dlp::v2beta1::InspectResult::MergeFrom(from.result());
  }
}

void ListInspectFindingsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInspectFindingsResponse::CopyFrom(const ListInspectFindingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInspectFindingsResponse::IsInitialized() const {
  return true;
}

void ListInspectFindingsResponse::Swap(ListInspectFindingsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInspectFindingsResponse::InternalSwap(ListInspectFindingsResponse* other) {
  next_page_token_.Swap(&other->next_page_token_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInspectFindingsResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListInspectFindingsResponse

// .google.privacy.dlp.v2beta1.InspectResult result = 1;
bool ListInspectFindingsResponse::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
void ListInspectFindingsResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::google::privacy::dlp::v2beta1::InspectResult& ListInspectFindingsResponse::result() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
  return result_ != NULL ? *result_
                         : *::google::privacy::dlp::v2beta1::InspectResult::internal_default_instance();
}
::google::privacy::dlp::v2beta1::InspectResult* ListInspectFindingsResponse::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::google::privacy::dlp::v2beta1::InspectResult;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
  return result_;
}
::google::privacy::dlp::v2beta1::InspectResult* ListInspectFindingsResponse::release_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
  
  ::google::privacy::dlp::v2beta1::InspectResult* temp = result_;
  result_ = NULL;
  return temp;
}
void ListInspectFindingsResponse::set_allocated_result(::google::privacy::dlp::v2beta1::InspectResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
}

// string next_page_token = 2;
void ListInspectFindingsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListInspectFindingsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
void ListInspectFindingsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
#if LANG_CXX11
void ListInspectFindingsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
#endif
void ListInspectFindingsResponse::set_next_page_token(const char* value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
void ListInspectFindingsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
::std::string* ListInspectFindingsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListInspectFindingsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListInspectFindingsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoTypeDescription::kNameFieldNumber;
const int InfoTypeDescription::kDisplayNameFieldNumber;
const int InfoTypeDescription::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoTypeDescription::InfoTypeDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.InfoTypeDescription)
}
InfoTypeDescription::InfoTypeDescription(const InfoTypeDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      categories_(from.categories_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.InfoTypeDescription)
}

void InfoTypeDescription::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

InfoTypeDescription::~InfoTypeDescription() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.InfoTypeDescription)
  SharedDtor();
}

void InfoTypeDescription::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InfoTypeDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoTypeDescription::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[18].descriptor;
}

const InfoTypeDescription& InfoTypeDescription::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfoTypeDescription* InfoTypeDescription::New(::google::protobuf::Arena* arena) const {
  InfoTypeDescription* n = new InfoTypeDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoTypeDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  categories_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InfoTypeDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.InfoTypeDescription.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.InfoTypeDescription.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_categories()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.InfoTypeDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.InfoTypeDescription)
  return false;
#undef DO_
}

void InfoTypeDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InfoTypeDescription.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InfoTypeDescription.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
  for (unsigned int i = 0, n = this->categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->categories(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.InfoTypeDescription)
}

::google::protobuf::uint8* InfoTypeDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InfoTypeDescription.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.InfoTypeDescription.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
  for (unsigned int i = 0, n = this->categories_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->categories(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.InfoTypeDescription)
  return target;
}

size_t InfoTypeDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
  {
    unsigned int count = this->categories_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categories(i));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoTypeDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoTypeDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoTypeDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.InfoTypeDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.InfoTypeDescription)
    MergeFrom(*source);
  }
}

void InfoTypeDescription::MergeFrom(const InfoTypeDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  categories_.MergeFrom(from.categories_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
}

void InfoTypeDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoTypeDescription::CopyFrom(const InfoTypeDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.InfoTypeDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoTypeDescription::IsInitialized() const {
  return true;
}

void InfoTypeDescription::Swap(InfoTypeDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoTypeDescription::InternalSwap(InfoTypeDescription* other) {
  categories_.UnsafeArenaSwap(&other->categories_);
  name_.Swap(&other->name_);
  display_name_.Swap(&other->display_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoTypeDescription::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfoTypeDescription

// string name = 1;
void InfoTypeDescription::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InfoTypeDescription::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
  return name_.GetNoArena();
}
void InfoTypeDescription::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
#if LANG_CXX11
void InfoTypeDescription::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
#endif
void InfoTypeDescription::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
void InfoTypeDescription::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
::std::string* InfoTypeDescription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InfoTypeDescription::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InfoTypeDescription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}

// string display_name = 2;
void InfoTypeDescription::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& InfoTypeDescription::display_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
  return display_name_.GetNoArena();
}
void InfoTypeDescription::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
#if LANG_CXX11
void InfoTypeDescription::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
#endif
void InfoTypeDescription::set_display_name(const char* value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
void InfoTypeDescription::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
::std::string* InfoTypeDescription::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InfoTypeDescription::release_display_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InfoTypeDescription::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}

// repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
int InfoTypeDescription::categories_size() const {
  return categories_.size();
}
void InfoTypeDescription::clear_categories() {
  categories_.Clear();
}
const ::google::privacy::dlp::v2beta1::CategoryDescription& InfoTypeDescription::categories(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_.Get(index);
}
::google::privacy::dlp::v2beta1::CategoryDescription* InfoTypeDescription::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_.Mutable(index);
}
::google::privacy::dlp::v2beta1::CategoryDescription* InfoTypeDescription::add_categories() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >*
InfoTypeDescription::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return &categories_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >&
InfoTypeDescription::categories() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInfoTypesRequest::kCategoryFieldNumber;
const int ListInfoTypesRequest::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInfoTypesRequest::ListInfoTypesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
}
ListInfoTypesRequest::ListInfoTypesRequest(const ListInfoTypesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.category().size() > 0) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
}

void ListInfoTypesRequest::SharedCtor() {
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListInfoTypesRequest::~ListInfoTypesRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  SharedDtor();
}

void ListInfoTypesRequest::SharedDtor() {
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListInfoTypesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInfoTypesRequest::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[19].descriptor;
}

const ListInfoTypesRequest& ListInfoTypesRequest::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListInfoTypesRequest* ListInfoTypesRequest::New(::google::protobuf::Arena* arena) const {
  ListInfoTypesRequest* n = new ListInfoTypesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInfoTypesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListInfoTypesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string category = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInfoTypesRequest.category"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language_code = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), this->language_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  return false;
#undef DO_
}

void ListInfoTypesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  // string category = 1;
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInfoTypesRequest.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->category(), output);
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
}

::google::protobuf::uint8* ListInfoTypesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  // string category = 1;
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInfoTypesRequest.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->category(), target);
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  return target;
}

size_t ListInfoTypesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  size_t total_size = 0;

  // string category = 1;
  if (this->category().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInfoTypesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInfoTypesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInfoTypesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
    MergeFrom(*source);
  }
}

void ListInfoTypesRequest::MergeFrom(const ListInfoTypesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.category().size() > 0) {

    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.language_code().size() > 0) {

    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
}

void ListInfoTypesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInfoTypesRequest::CopyFrom(const ListInfoTypesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInfoTypesRequest::IsInitialized() const {
  return true;
}

void ListInfoTypesRequest::Swap(ListInfoTypesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInfoTypesRequest::InternalSwap(ListInfoTypesRequest* other) {
  category_.Swap(&other->category_);
  language_code_.Swap(&other->language_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInfoTypesRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListInfoTypesRequest

// string category = 1;
void ListInfoTypesRequest::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListInfoTypesRequest::category() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
  return category_.GetNoArena();
}
void ListInfoTypesRequest::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
#if LANG_CXX11
void ListInfoTypesRequest::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
#endif
void ListInfoTypesRequest::set_category(const char* value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
void ListInfoTypesRequest::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
::std::string* ListInfoTypesRequest::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListInfoTypesRequest::release_category() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListInfoTypesRequest::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}

// string language_code = 2;
void ListInfoTypesRequest::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListInfoTypesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
  return language_code_.GetNoArena();
}
void ListInfoTypesRequest::set_language_code(const ::std::string& value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
#if LANG_CXX11
void ListInfoTypesRequest::set_language_code(::std::string&& value) {
  
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
#endif
void ListInfoTypesRequest::set_language_code(const char* value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
void ListInfoTypesRequest::set_language_code(const char* value, size_t size) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
::std::string* ListInfoTypesRequest::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListInfoTypesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
  
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListInfoTypesRequest::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInfoTypesResponse::kInfoTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInfoTypesResponse::ListInfoTypesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
}
ListInfoTypesResponse::ListInfoTypesResponse(const ListInfoTypesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_types_(from.info_types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
}

void ListInfoTypesResponse::SharedCtor() {
  _cached_size_ = 0;
}

ListInfoTypesResponse::~ListInfoTypesResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  SharedDtor();
}

void ListInfoTypesResponse::SharedDtor() {
}

void ListInfoTypesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListInfoTypesResponse::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[20].descriptor;
}

const ListInfoTypesResponse& ListInfoTypesResponse::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListInfoTypesResponse* ListInfoTypesResponse::New(::google::protobuf::Arena* arena) const {
  ListInfoTypesResponse* n = new ListInfoTypesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListInfoTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  info_types_.Clear();
}

bool ListInfoTypesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_info_types()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  return false;
#undef DO_
}

void ListInfoTypesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  // repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
  for (unsigned int i = 0, n = this->info_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_types(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
}

::google::protobuf::uint8* ListInfoTypesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  // repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
  for (unsigned int i = 0, n = this->info_types_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->info_types(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  return target;
}

size_t ListInfoTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
  {
    unsigned int count = this->info_types_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_types(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListInfoTypesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInfoTypesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListInfoTypesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
    MergeFrom(*source);
  }
}

void ListInfoTypesResponse::MergeFrom(const ListInfoTypesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_types_.MergeFrom(from.info_types_);
}

void ListInfoTypesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInfoTypesResponse::CopyFrom(const ListInfoTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInfoTypesResponse::IsInitialized() const {
  return true;
}

void ListInfoTypesResponse::Swap(ListInfoTypesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInfoTypesResponse::InternalSwap(ListInfoTypesResponse* other) {
  info_types_.UnsafeArenaSwap(&other->info_types_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListInfoTypesResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListInfoTypesResponse

// repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
int ListInfoTypesResponse::info_types_size() const {
  return info_types_.size();
}
void ListInfoTypesResponse::clear_info_types() {
  info_types_.Clear();
}
const ::google::privacy::dlp::v2beta1::InfoTypeDescription& ListInfoTypesResponse::info_types(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_.Get(index);
}
::google::privacy::dlp::v2beta1::InfoTypeDescription* ListInfoTypesResponse::mutable_info_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_.Mutable(index);
}
::google::privacy::dlp::v2beta1::InfoTypeDescription* ListInfoTypesResponse::add_info_types() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeDescription >*
ListInfoTypesResponse::mutable_info_types() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return &info_types_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeDescription >&
ListInfoTypesResponse::info_types() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoryDescription::kNameFieldNumber;
const int CategoryDescription::kDisplayNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoryDescription::CategoryDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.CategoryDescription)
}
CategoryDescription::CategoryDescription(const CategoryDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.CategoryDescription)
}

void CategoryDescription::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CategoryDescription::~CategoryDescription() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.CategoryDescription)
  SharedDtor();
}

void CategoryDescription::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CategoryDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoryDescription::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[21].descriptor;
}

const CategoryDescription& CategoryDescription::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

CategoryDescription* CategoryDescription::New(::google::protobuf::Arena* arena) const {
  CategoryDescription* n = new CategoryDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CategoryDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.CategoryDescription)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CategoryDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.CategoryDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.CategoryDescription.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.CategoryDescription.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.CategoryDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.CategoryDescription)
  return false;
#undef DO_
}

void CategoryDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.CategoryDescription)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CategoryDescription.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CategoryDescription.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.CategoryDescription)
}

::google::protobuf::uint8* CategoryDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.CategoryDescription)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CategoryDescription.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.CategoryDescription.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.CategoryDescription)
  return target;
}

size_t CategoryDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.CategoryDescription)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoryDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.CategoryDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const CategoryDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoryDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.CategoryDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.CategoryDescription)
    MergeFrom(*source);
  }
}

void CategoryDescription::MergeFrom(const CategoryDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.CategoryDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
}

void CategoryDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.CategoryDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoryDescription::CopyFrom(const CategoryDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.CategoryDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryDescription::IsInitialized() const {
  return true;
}

void CategoryDescription::Swap(CategoryDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoryDescription::InternalSwap(CategoryDescription* other) {
  name_.Swap(&other->name_);
  display_name_.Swap(&other->display_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoryDescription::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CategoryDescription

// string name = 1;
void CategoryDescription::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CategoryDescription::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CategoryDescription.name)
  return name_.GetNoArena();
}
void CategoryDescription::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
#if LANG_CXX11
void CategoryDescription::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
#endif
void CategoryDescription::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
void CategoryDescription::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
::std::string* CategoryDescription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CategoryDescription.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CategoryDescription::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CategoryDescription.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CategoryDescription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CategoryDescription.name)
}

// string display_name = 2;
void CategoryDescription::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CategoryDescription::display_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
  return display_name_.GetNoArena();
}
void CategoryDescription::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
#if LANG_CXX11
void CategoryDescription::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
#endif
void CategoryDescription::set_display_name(const char* value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
void CategoryDescription::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
::std::string* CategoryDescription::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CategoryDescription::release_display_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CategoryDescription::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRootCategoriesRequest::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRootCategoriesRequest::ListRootCategoriesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
}
ListRootCategoriesRequest::ListRootCategoriesRequest(const ListRootCategoriesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
}

void ListRootCategoriesRequest::SharedCtor() {
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListRootCategoriesRequest::~ListRootCategoriesRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  SharedDtor();
}

void ListRootCategoriesRequest::SharedDtor() {
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListRootCategoriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRootCategoriesRequest::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[22].descriptor;
}

const ListRootCategoriesRequest& ListRootCategoriesRequest::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListRootCategoriesRequest* ListRootCategoriesRequest::New(::google::protobuf::Arena* arena) const {
  ListRootCategoriesRequest* n = new ListRootCategoriesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRootCategoriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ListRootCategoriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string language_code = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), this->language_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  return false;
#undef DO_
}

void ListRootCategoriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
}

::google::protobuf::uint8* ListRootCategoriesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  return target;
}

size_t ListRootCategoriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  size_t total_size = 0;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRootCategoriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRootCategoriesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRootCategoriesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
    MergeFrom(*source);
  }
}

void ListRootCategoriesRequest::MergeFrom(const ListRootCategoriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.language_code().size() > 0) {

    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
}

void ListRootCategoriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRootCategoriesRequest::CopyFrom(const ListRootCategoriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRootCategoriesRequest::IsInitialized() const {
  return true;
}

void ListRootCategoriesRequest::Swap(ListRootCategoriesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRootCategoriesRequest::InternalSwap(ListRootCategoriesRequest* other) {
  language_code_.Swap(&other->language_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRootCategoriesRequest::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRootCategoriesRequest

// string language_code = 1;
void ListRootCategoriesRequest::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ListRootCategoriesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
  return language_code_.GetNoArena();
}
void ListRootCategoriesRequest::set_language_code(const ::std::string& value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
#if LANG_CXX11
void ListRootCategoriesRequest::set_language_code(::std::string&& value) {
  
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
#endif
void ListRootCategoriesRequest::set_language_code(const char* value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
void ListRootCategoriesRequest::set_language_code(const char* value, size_t size) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
::std::string* ListRootCategoriesRequest::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListRootCategoriesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
  
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListRootCategoriesRequest::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRootCategoriesResponse::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRootCategoriesResponse::ListRootCategoriesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
}
ListRootCategoriesResponse::ListRootCategoriesResponse(const ListRootCategoriesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      categories_(from.categories_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
}

void ListRootCategoriesResponse::SharedCtor() {
  _cached_size_ = 0;
}

ListRootCategoriesResponse::~ListRootCategoriesResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  SharedDtor();
}

void ListRootCategoriesResponse::SharedDtor() {
}

void ListRootCategoriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRootCategoriesResponse::descriptor() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[23].descriptor;
}

const ListRootCategoriesResponse& ListRootCategoriesResponse::default_instance() {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListRootCategoriesResponse* ListRootCategoriesResponse::New(::google::protobuf::Arena* arena) const {
  ListRootCategoriesResponse* n = new ListRootCategoriesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRootCategoriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  categories_.Clear();
}

bool ListRootCategoriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_categories()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  return false;
#undef DO_
}

void ListRootCategoriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
  for (unsigned int i = 0, n = this->categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->categories(i), output);
  }

  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
}

::google::protobuf::uint8* ListRootCategoriesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
  for (unsigned int i = 0, n = this->categories_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->categories(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  return target;
}

size_t ListRootCategoriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  size_t total_size = 0;

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
  {
    unsigned int count = this->categories_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categories(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRootCategoriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRootCategoriesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRootCategoriesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
    MergeFrom(*source);
  }
}

void ListRootCategoriesResponse::MergeFrom(const ListRootCategoriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  categories_.MergeFrom(from.categories_);
}

void ListRootCategoriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRootCategoriesResponse::CopyFrom(const ListRootCategoriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRootCategoriesResponse::IsInitialized() const {
  return true;
}

void ListRootCategoriesResponse::Swap(ListRootCategoriesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRootCategoriesResponse::InternalSwap(ListRootCategoriesResponse* other) {
  categories_.UnsafeArenaSwap(&other->categories_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRootCategoriesResponse::GetMetadata() const {
  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRootCategoriesResponse

// repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
int ListRootCategoriesResponse::categories_size() const {
  return categories_.size();
}
void ListRootCategoriesResponse::clear_categories() {
  categories_.Clear();
}
const ::google::privacy::dlp::v2beta1::CategoryDescription& ListRootCategoriesResponse::categories(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_.Get(index);
}
::google::privacy::dlp::v2beta1::CategoryDescription* ListRootCategoriesResponse::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_.Mutable(index);
}
::google::privacy::dlp::v2beta1::CategoryDescription* ListRootCategoriesResponse::add_categories() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >*
ListRootCategoriesResponse::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return &categories_;
}
const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >&
ListRootCategoriesResponse::categories() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2beta1
}  // namespace dlp
}  // namespace privacy
}  // namespace google

// @@protoc_insertion_point(global_scope)
