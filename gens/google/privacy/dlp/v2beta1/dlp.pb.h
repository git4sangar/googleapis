// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2beta1/dlp.proto

#ifndef PROTOBUF_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto__INCLUDED
#define PROTOBUF_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/longrunning/operations.pb.h"
#include "google/privacy/dlp/v2beta1/storage.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
namespace google {
namespace api {
}  // namespace api
namespace longrunning {
class CancelOperationRequest;
class CancelOperationRequestDefaultTypeInternal;
extern CancelOperationRequestDefaultTypeInternal _CancelOperationRequest_default_instance_;
class DeleteOperationRequest;
class DeleteOperationRequestDefaultTypeInternal;
extern DeleteOperationRequestDefaultTypeInternal _DeleteOperationRequest_default_instance_;
class GetOperationRequest;
class GetOperationRequestDefaultTypeInternal;
extern GetOperationRequestDefaultTypeInternal _GetOperationRequest_default_instance_;
class ListOperationsRequest;
class ListOperationsRequestDefaultTypeInternal;
extern ListOperationsRequestDefaultTypeInternal _ListOperationsRequest_default_instance_;
class ListOperationsResponse;
class ListOperationsResponseDefaultTypeInternal;
extern ListOperationsResponseDefaultTypeInternal _ListOperationsResponse_default_instance_;
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
}  // namespace longrunning
namespace privacy {
namespace dlp {
namespace v2beta1 {
class CategoryDescription;
class CategoryDescriptionDefaultTypeInternal;
extern CategoryDescriptionDefaultTypeInternal _CategoryDescription_default_instance_;
class CloudStorageKey;
class CloudStorageKeyDefaultTypeInternal;
extern CloudStorageKeyDefaultTypeInternal _CloudStorageKey_default_instance_;
class CloudStorageOptions;
class CloudStorageOptionsDefaultTypeInternal;
extern CloudStorageOptionsDefaultTypeInternal _CloudStorageOptions_default_instance_;
class CloudStorageOptions_FileSet;
class CloudStorageOptions_FileSetDefaultTypeInternal;
extern CloudStorageOptions_FileSetDefaultTypeInternal _CloudStorageOptions_FileSet_default_instance_;
class ContentItem;
class ContentItemDefaultTypeInternal;
extern ContentItemDefaultTypeInternal _ContentItem_default_instance_;
class CreateInspectOperationRequest;
class CreateInspectOperationRequestDefaultTypeInternal;
extern CreateInspectOperationRequestDefaultTypeInternal _CreateInspectOperationRequest_default_instance_;
class DatastoreKey;
class DatastoreKeyDefaultTypeInternal;
extern DatastoreKeyDefaultTypeInternal _DatastoreKey_default_instance_;
class DatastoreOptions;
class DatastoreOptionsDefaultTypeInternal;
extern DatastoreOptionsDefaultTypeInternal _DatastoreOptions_default_instance_;
class FieldId;
class FieldIdDefaultTypeInternal;
extern FieldIdDefaultTypeInternal _FieldId_default_instance_;
class Finding;
class FindingDefaultTypeInternal;
extern FindingDefaultTypeInternal _Finding_default_instance_;
class ImageLocation;
class ImageLocationDefaultTypeInternal;
extern ImageLocationDefaultTypeInternal _ImageLocation_default_instance_;
class InfoType;
class InfoTypeDefaultTypeInternal;
extern InfoTypeDefaultTypeInternal _InfoType_default_instance_;
class InfoTypeDescription;
class InfoTypeDescriptionDefaultTypeInternal;
extern InfoTypeDescriptionDefaultTypeInternal _InfoTypeDescription_default_instance_;
class InfoTypeStatistics;
class InfoTypeStatisticsDefaultTypeInternal;
extern InfoTypeStatisticsDefaultTypeInternal _InfoTypeStatistics_default_instance_;
class InspectConfig;
class InspectConfigDefaultTypeInternal;
extern InspectConfigDefaultTypeInternal _InspectConfig_default_instance_;
class InspectContentRequest;
class InspectContentRequestDefaultTypeInternal;
extern InspectContentRequestDefaultTypeInternal _InspectContentRequest_default_instance_;
class InspectContentResponse;
class InspectContentResponseDefaultTypeInternal;
extern InspectContentResponseDefaultTypeInternal _InspectContentResponse_default_instance_;
class InspectOperationMetadata;
class InspectOperationMetadataDefaultTypeInternal;
extern InspectOperationMetadataDefaultTypeInternal _InspectOperationMetadata_default_instance_;
class InspectOperationResult;
class InspectOperationResultDefaultTypeInternal;
extern InspectOperationResultDefaultTypeInternal _InspectOperationResult_default_instance_;
class InspectResult;
class InspectResultDefaultTypeInternal;
extern InspectResultDefaultTypeInternal _InspectResult_default_instance_;
class Key;
class KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class Key_PathElement;
class Key_PathElementDefaultTypeInternal;
extern Key_PathElementDefaultTypeInternal _Key_PathElement_default_instance_;
class KindExpression;
class KindExpressionDefaultTypeInternal;
extern KindExpressionDefaultTypeInternal _KindExpression_default_instance_;
class ListInfoTypesRequest;
class ListInfoTypesRequestDefaultTypeInternal;
extern ListInfoTypesRequestDefaultTypeInternal _ListInfoTypesRequest_default_instance_;
class ListInfoTypesResponse;
class ListInfoTypesResponseDefaultTypeInternal;
extern ListInfoTypesResponseDefaultTypeInternal _ListInfoTypesResponse_default_instance_;
class ListInspectFindingsRequest;
class ListInspectFindingsRequestDefaultTypeInternal;
extern ListInspectFindingsRequestDefaultTypeInternal _ListInspectFindingsRequest_default_instance_;
class ListInspectFindingsResponse;
class ListInspectFindingsResponseDefaultTypeInternal;
extern ListInspectFindingsResponseDefaultTypeInternal _ListInspectFindingsResponse_default_instance_;
class ListRootCategoriesRequest;
class ListRootCategoriesRequestDefaultTypeInternal;
extern ListRootCategoriesRequestDefaultTypeInternal _ListRootCategoriesRequest_default_instance_;
class ListRootCategoriesResponse;
class ListRootCategoriesResponseDefaultTypeInternal;
extern ListRootCategoriesResponseDefaultTypeInternal _ListRootCategoriesResponse_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class PartitionId;
class PartitionIdDefaultTypeInternal;
extern PartitionIdDefaultTypeInternal _PartitionId_default_instance_;
class Projection;
class ProjectionDefaultTypeInternal;
extern ProjectionDefaultTypeInternal _Projection_default_instance_;
class PropertyReference;
class PropertyReferenceDefaultTypeInternal;
extern PropertyReferenceDefaultTypeInternal _PropertyReference_default_instance_;
class Range;
class RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class RecordKey;
class RecordKeyDefaultTypeInternal;
extern RecordKeyDefaultTypeInternal _RecordKey_default_instance_;
class RedactContentRequest;
class RedactContentRequestDefaultTypeInternal;
extern RedactContentRequestDefaultTypeInternal _RedactContentRequest_default_instance_;
class RedactContentRequest_ReplaceConfig;
class RedactContentRequest_ReplaceConfigDefaultTypeInternal;
extern RedactContentRequest_ReplaceConfigDefaultTypeInternal _RedactContentRequest_ReplaceConfig_default_instance_;
class RedactContentResponse;
class RedactContentResponseDefaultTypeInternal;
extern RedactContentResponseDefaultTypeInternal _RedactContentResponse_default_instance_;
class StorageConfig;
class StorageConfigDefaultTypeInternal;
extern StorageConfigDefaultTypeInternal _StorageConfig_default_instance_;
}  // namespace v2beta1
}  // namespace dlp
}  // namespace privacy
namespace protobuf {
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace google {
namespace privacy {
namespace dlp {
namespace v2beta1 {

namespace protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto

enum Likelihood {
  LIKELIHOOD_UNSPECIFIED = 0,
  VERY_UNLIKELY = 1,
  UNLIKELY = 2,
  POSSIBLE = 3,
  LIKELY = 4,
  VERY_LIKELY = 5,
  Likelihood_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Likelihood_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Likelihood_IsValid(int value);
const Likelihood Likelihood_MIN = LIKELIHOOD_UNSPECIFIED;
const Likelihood Likelihood_MAX = VERY_LIKELY;
const int Likelihood_ARRAYSIZE = Likelihood_MAX + 1;

const ::google::protobuf::EnumDescriptor* Likelihood_descriptor();
inline const ::std::string& Likelihood_Name(Likelihood value) {
  return ::google::protobuf::internal::NameOfEnum(
    Likelihood_descriptor(), value);
}
inline bool Likelihood_Parse(
    const ::std::string& name, Likelihood* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Likelihood>(
    Likelihood_descriptor(), name, value);
}
// ===================================================================

class InspectConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InspectConfig) */ {
 public:
  InspectConfig();
  virtual ~InspectConfig();

  InspectConfig(const InspectConfig& from);

  inline InspectConfig& operator=(const InspectConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectConfig& default_instance();

  static inline const InspectConfig* internal_default_instance() {
    return reinterpret_cast<const InspectConfig*>(
               &_InspectConfig_default_instance_);
  }

  void Swap(InspectConfig* other);

  // implements Message ----------------------------------------------

  inline InspectConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  InspectConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InspectConfig& from);
  void MergeFrom(const InspectConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InspectConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
  int info_types_size() const;
  void clear_info_types();
  static const int kInfoTypesFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InfoType& info_types(int index) const;
  ::google::privacy::dlp::v2beta1::InfoType* mutable_info_types(int index);
  ::google::privacy::dlp::v2beta1::InfoType* add_info_types();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >*
      mutable_info_types();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >&
      info_types() const;

  // .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
  void clear_min_likelihood();
  static const int kMinLikelihoodFieldNumber = 2;
  ::google::privacy::dlp::v2beta1::Likelihood min_likelihood() const;
  void set_min_likelihood(::google::privacy::dlp::v2beta1::Likelihood value);

  // int32 max_findings = 3;
  void clear_max_findings();
  static const int kMaxFindingsFieldNumber = 3;
  ::google::protobuf::int32 max_findings() const;
  void set_max_findings(::google::protobuf::int32 value);

  // bool include_quote = 4;
  void clear_include_quote();
  static const int kIncludeQuoteFieldNumber = 4;
  bool include_quote() const;
  void set_include_quote(bool value);

  // bool exclude_types = 6;
  void clear_exclude_types();
  static const int kExcludeTypesFieldNumber = 6;
  bool exclude_types() const;
  void set_exclude_types(bool value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType > info_types_;
  int min_likelihood_;
  ::google::protobuf::int32 max_findings_;
  bool include_quote_;
  bool exclude_types_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContentItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ContentItem) */ {
 public:
  ContentItem();
  virtual ~ContentItem();

  ContentItem(const ContentItem& from);

  inline ContentItem& operator=(const ContentItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentItem& default_instance();

  enum DataItemCase {
    kData = 2,
    kValue = 3,
    DATA_ITEM_NOT_SET = 0,
  };

  static inline const ContentItem* internal_default_instance() {
    return reinterpret_cast<const ContentItem*>(
               &_ContentItem_default_instance_);
  }

  void Swap(ContentItem* other);

  // implements Message ----------------------------------------------

  inline ContentItem* New() const PROTOBUF_FINAL { return New(NULL); }

  ContentItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ContentItem& from);
  void MergeFrom(const ContentItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ContentItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // bytes data = 2;
  private:
  bool has_data() const;
  public:
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string value = 3;
  private:
  bool has_value() const;
  public:
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  DataItemCase data_item_case() const;
  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ContentItem)
 private:
  void set_has_data();
  void set_has_value();

  inline bool has_data_item() const;
  void clear_data_item();
  inline void clear_has_data_item();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  union DataItemUnion {
    DataItemUnion() {}
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr value_;
  } data_item_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InspectResult) */ {
 public:
  InspectResult();
  virtual ~InspectResult();

  InspectResult(const InspectResult& from);

  inline InspectResult& operator=(const InspectResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectResult& default_instance();

  static inline const InspectResult* internal_default_instance() {
    return reinterpret_cast<const InspectResult*>(
               &_InspectResult_default_instance_);
  }

  void Swap(InspectResult* other);

  // implements Message ----------------------------------------------

  inline InspectResult* New() const PROTOBUF_FINAL { return New(NULL); }

  InspectResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InspectResult& from);
  void MergeFrom(const InspectResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InspectResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
  int findings_size() const;
  void clear_findings();
  static const int kFindingsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::Finding& findings(int index) const;
  ::google::privacy::dlp::v2beta1::Finding* mutable_findings(int index);
  ::google::privacy::dlp::v2beta1::Finding* add_findings();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Finding >*
      mutable_findings();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Finding >&
      findings() const;

  // bool findings_truncated = 2;
  void clear_findings_truncated();
  static const int kFindingsTruncatedFieldNumber = 2;
  bool findings_truncated() const;
  void set_findings_truncated(bool value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Finding > findings_;
  bool findings_truncated_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Finding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.Finding) */ {
 public:
  Finding();
  virtual ~Finding();

  Finding(const Finding& from);

  inline Finding& operator=(const Finding& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Finding& default_instance();

  static inline const Finding* internal_default_instance() {
    return reinterpret_cast<const Finding*>(
               &_Finding_default_instance_);
  }

  void Swap(Finding* other);

  // implements Message ----------------------------------------------

  inline Finding* New() const PROTOBUF_FINAL { return New(NULL); }

  Finding* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Finding& from);
  void MergeFrom(const Finding& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Finding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string quote = 1;
  void clear_quote();
  static const int kQuoteFieldNumber = 1;
  const ::std::string& quote() const;
  void set_quote(const ::std::string& value);
  #if LANG_CXX11
  void set_quote(::std::string&& value);
  #endif
  void set_quote(const char* value);
  void set_quote(const char* value, size_t size);
  ::std::string* mutable_quote();
  ::std::string* release_quote();
  void set_allocated_quote(::std::string* quote);

  // .google.privacy.dlp.v2beta1.InfoType info_type = 2;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::InfoType& info_type() const;
  ::google::privacy::dlp::v2beta1::InfoType* mutable_info_type();
  ::google::privacy::dlp::v2beta1::InfoType* release_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type);

  // .google.privacy.dlp.v2beta1.Location location = 4;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::Location& location() const;
  ::google::privacy::dlp::v2beta1::Location* mutable_location();
  ::google::privacy::dlp::v2beta1::Location* release_location();
  void set_allocated_location(::google::privacy::dlp::v2beta1::Location* location);

  // .google.protobuf.Timestamp create_time = 6;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* mutable_create_time();
  ::google::protobuf::Timestamp* release_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
  void clear_likelihood();
  static const int kLikelihoodFieldNumber = 3;
  ::google::privacy::dlp::v2beta1::Likelihood likelihood() const;
  void set_likelihood(::google::privacy::dlp::v2beta1::Likelihood value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.Finding)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr quote_;
  ::google::privacy::dlp::v2beta1::InfoType* info_type_;
  ::google::privacy::dlp::v2beta1::Location* location_;
  ::google::protobuf::Timestamp* create_time_;
  int likelihood_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  inline Location* New() const PROTOBUF_FINAL { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
  int image_boxes_size() const;
  void clear_image_boxes();
  static const int kImageBoxesFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::ImageLocation& image_boxes(int index) const;
  ::google::privacy::dlp::v2beta1::ImageLocation* mutable_image_boxes(int index);
  ::google::privacy::dlp::v2beta1::ImageLocation* add_image_boxes();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ImageLocation >*
      mutable_image_boxes();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ImageLocation >&
      image_boxes() const;

  // .google.privacy.dlp.v2beta1.Range byte_range = 1;
  bool has_byte_range() const;
  void clear_byte_range();
  static const int kByteRangeFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::Range& byte_range() const;
  ::google::privacy::dlp::v2beta1::Range* mutable_byte_range();
  ::google::privacy::dlp::v2beta1::Range* release_byte_range();
  void set_allocated_byte_range(::google::privacy::dlp::v2beta1::Range* byte_range);

  // .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
  bool has_codepoint_range() const;
  void clear_codepoint_range();
  static const int kCodepointRangeFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::Range& codepoint_range() const;
  ::google::privacy::dlp::v2beta1::Range* mutable_codepoint_range();
  ::google::privacy::dlp::v2beta1::Range* release_codepoint_range();
  void set_allocated_codepoint_range(::google::privacy::dlp::v2beta1::Range* codepoint_range);

  // .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
  bool has_record_key() const;
  void clear_record_key();
  static const int kRecordKeyFieldNumber = 4;
  const ::google::privacy::dlp::v2beta1::RecordKey& record_key() const;
  ::google::privacy::dlp::v2beta1::RecordKey* mutable_record_key();
  ::google::privacy::dlp::v2beta1::RecordKey* release_record_key();
  void set_allocated_record_key(::google::privacy::dlp::v2beta1::RecordKey* record_key);

  // .google.privacy.dlp.v2beta1.FieldId field_id = 5;
  bool has_field_id() const;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 5;
  const ::google::privacy::dlp::v2beta1::FieldId& field_id() const;
  ::google::privacy::dlp::v2beta1::FieldId* mutable_field_id();
  ::google::privacy::dlp::v2beta1::FieldId* release_field_id();
  void set_allocated_field_id(::google::privacy::dlp::v2beta1::FieldId* field_id);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ImageLocation > image_boxes_;
  ::google::privacy::dlp::v2beta1::Range* byte_range_;
  ::google::privacy::dlp::v2beta1::Range* codepoint_range_;
  ::google::privacy::dlp::v2beta1::RecordKey* record_key_;
  ::google::privacy::dlp::v2beta1::FieldId* field_id_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Range : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.Range) */ {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }

  void Swap(Range* other);

  // implements Message ----------------------------------------------

  inline Range* New() const PROTOBUF_FINAL { return New(NULL); }

  Range* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Range* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::int64 start() const;
  void set_start(::google::protobuf::int64 value);

  // int64 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.Range)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 end_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ImageLocation) */ {
 public:
  ImageLocation();
  virtual ~ImageLocation();

  ImageLocation(const ImageLocation& from);

  inline ImageLocation& operator=(const ImageLocation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageLocation& default_instance();

  static inline const ImageLocation* internal_default_instance() {
    return reinterpret_cast<const ImageLocation*>(
               &_ImageLocation_default_instance_);
  }

  void Swap(ImageLocation* other);

  // implements Message ----------------------------------------------

  inline ImageLocation* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageLocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageLocation& from);
  void MergeFrom(const ImageLocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 top = 1;
  void clear_top();
  static const int kTopFieldNumber = 1;
  ::google::protobuf::int32 top() const;
  void set_top(::google::protobuf::int32 value);

  // int32 left = 2;
  void clear_left();
  static const int kLeftFieldNumber = 2;
  ::google::protobuf::int32 left() const;
  void set_left(::google::protobuf::int32 value);

  // int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ImageLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RedactContentRequest_ReplaceConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig) */ {
 public:
  RedactContentRequest_ReplaceConfig();
  virtual ~RedactContentRequest_ReplaceConfig();

  RedactContentRequest_ReplaceConfig(const RedactContentRequest_ReplaceConfig& from);

  inline RedactContentRequest_ReplaceConfig& operator=(const RedactContentRequest_ReplaceConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedactContentRequest_ReplaceConfig& default_instance();

  static inline const RedactContentRequest_ReplaceConfig* internal_default_instance() {
    return reinterpret_cast<const RedactContentRequest_ReplaceConfig*>(
               &_RedactContentRequest_ReplaceConfig_default_instance_);
  }

  void Swap(RedactContentRequest_ReplaceConfig* other);

  // implements Message ----------------------------------------------

  inline RedactContentRequest_ReplaceConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  RedactContentRequest_ReplaceConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RedactContentRequest_ReplaceConfig& from);
  void MergeFrom(const RedactContentRequest_ReplaceConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RedactContentRequest_ReplaceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string replace_with = 2;
  void clear_replace_with();
  static const int kReplaceWithFieldNumber = 2;
  const ::std::string& replace_with() const;
  void set_replace_with(const ::std::string& value);
  #if LANG_CXX11
  void set_replace_with(::std::string&& value);
  #endif
  void set_replace_with(const char* value);
  void set_replace_with(const char* value, size_t size);
  ::std::string* mutable_replace_with();
  ::std::string* release_replace_with();
  void set_allocated_replace_with(::std::string* replace_with);

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InfoType& info_type() const;
  ::google::privacy::dlp::v2beta1::InfoType* mutable_info_type();
  ::google::privacy::dlp::v2beta1::InfoType* release_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr replace_with_;
  ::google::privacy::dlp::v2beta1::InfoType* info_type_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RedactContentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RedactContentRequest) */ {
 public:
  RedactContentRequest();
  virtual ~RedactContentRequest();

  RedactContentRequest(const RedactContentRequest& from);

  inline RedactContentRequest& operator=(const RedactContentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedactContentRequest& default_instance();

  static inline const RedactContentRequest* internal_default_instance() {
    return reinterpret_cast<const RedactContentRequest*>(
               &_RedactContentRequest_default_instance_);
  }

  void Swap(RedactContentRequest* other);

  // implements Message ----------------------------------------------

  inline RedactContentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RedactContentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RedactContentRequest& from);
  void MergeFrom(const RedactContentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RedactContentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RedactContentRequest_ReplaceConfig ReplaceConfig;

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::ContentItem& items(int index) const;
  ::google::privacy::dlp::v2beta1::ContentItem* mutable_items(int index);
  ::google::privacy::dlp::v2beta1::ContentItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
      items() const;

  // repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
  int replace_configs_size() const;
  void clear_replace_configs();
  static const int kReplaceConfigsFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig& replace_configs(int index) const;
  ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig* mutable_replace_configs(int index);
  ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig* add_replace_configs();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig >*
      mutable_replace_configs();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig >&
      replace_configs() const;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  bool has_inspect_config() const;
  void clear_inspect_config();
  static const int kInspectConfigFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InspectConfig& inspect_config() const;
  ::google::privacy::dlp::v2beta1::InspectConfig* mutable_inspect_config();
  ::google::privacy::dlp::v2beta1::InspectConfig* release_inspect_config();
  void set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RedactContentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem > items_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig > replace_configs_;
  ::google::privacy::dlp::v2beta1::InspectConfig* inspect_config_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RedactContentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.RedactContentResponse) */ {
 public:
  RedactContentResponse();
  virtual ~RedactContentResponse();

  RedactContentResponse(const RedactContentResponse& from);

  inline RedactContentResponse& operator=(const RedactContentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedactContentResponse& default_instance();

  static inline const RedactContentResponse* internal_default_instance() {
    return reinterpret_cast<const RedactContentResponse*>(
               &_RedactContentResponse_default_instance_);
  }

  void Swap(RedactContentResponse* other);

  // implements Message ----------------------------------------------

  inline RedactContentResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RedactContentResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RedactContentResponse& from);
  void MergeFrom(const RedactContentResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RedactContentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::ContentItem& items(int index) const;
  ::google::privacy::dlp::v2beta1::ContentItem* mutable_items(int index);
  ::google::privacy::dlp::v2beta1::ContentItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.RedactContentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem > items_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectContentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InspectContentRequest) */ {
 public:
  InspectContentRequest();
  virtual ~InspectContentRequest();

  InspectContentRequest(const InspectContentRequest& from);

  inline InspectContentRequest& operator=(const InspectContentRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectContentRequest& default_instance();

  static inline const InspectContentRequest* internal_default_instance() {
    return reinterpret_cast<const InspectContentRequest*>(
               &_InspectContentRequest_default_instance_);
  }

  void Swap(InspectContentRequest* other);

  // implements Message ----------------------------------------------

  inline InspectContentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  InspectContentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InspectContentRequest& from);
  void MergeFrom(const InspectContentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InspectContentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::ContentItem& items(int index) const;
  ::google::privacy::dlp::v2beta1::ContentItem* mutable_items(int index);
  ::google::privacy::dlp::v2beta1::ContentItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
      items() const;

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  bool has_inspect_config() const;
  void clear_inspect_config();
  static const int kInspectConfigFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InspectConfig& inspect_config() const;
  ::google::privacy::dlp::v2beta1::InspectConfig* mutable_inspect_config();
  ::google::privacy::dlp::v2beta1::InspectConfig* release_inspect_config();
  void set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectContentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem > items_;
  ::google::privacy::dlp::v2beta1::InspectConfig* inspect_config_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectContentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InspectContentResponse) */ {
 public:
  InspectContentResponse();
  virtual ~InspectContentResponse();

  InspectContentResponse(const InspectContentResponse& from);

  inline InspectContentResponse& operator=(const InspectContentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectContentResponse& default_instance();

  static inline const InspectContentResponse* internal_default_instance() {
    return reinterpret_cast<const InspectContentResponse*>(
               &_InspectContentResponse_default_instance_);
  }

  void Swap(InspectContentResponse* other);

  // implements Message ----------------------------------------------

  inline InspectContentResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  InspectContentResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InspectContentResponse& from);
  void MergeFrom(const InspectContentResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InspectContentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InspectResult& results(int index) const;
  ::google::privacy::dlp::v2beta1::InspectResult* mutable_results(int index);
  ::google::privacy::dlp::v2beta1::InspectResult* add_results();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectResult >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectResult >&
      results() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectContentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectResult > results_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateInspectOperationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.CreateInspectOperationRequest) */ {
 public:
  CreateInspectOperationRequest();
  virtual ~CreateInspectOperationRequest();

  CreateInspectOperationRequest(const CreateInspectOperationRequest& from);

  inline CreateInspectOperationRequest& operator=(const CreateInspectOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateInspectOperationRequest& default_instance();

  static inline const CreateInspectOperationRequest* internal_default_instance() {
    return reinterpret_cast<const CreateInspectOperationRequest*>(
               &_CreateInspectOperationRequest_default_instance_);
  }

  void Swap(CreateInspectOperationRequest* other);

  // implements Message ----------------------------------------------

  inline CreateInspectOperationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateInspectOperationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateInspectOperationRequest& from);
  void MergeFrom(const CreateInspectOperationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateInspectOperationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
  bool has_inspect_config() const;
  void clear_inspect_config();
  static const int kInspectConfigFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InspectConfig& inspect_config() const;
  ::google::privacy::dlp::v2beta1::InspectConfig* mutable_inspect_config();
  ::google::privacy::dlp::v2beta1::InspectConfig* release_inspect_config();
  void set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config);

  // .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
  bool has_storage_config() const;
  void clear_storage_config();
  static const int kStorageConfigFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::StorageConfig& storage_config() const;
  ::google::privacy::dlp::v2beta1::StorageConfig* mutable_storage_config();
  ::google::privacy::dlp::v2beta1::StorageConfig* release_storage_config();
  void set_allocated_storage_config(::google::privacy::dlp::v2beta1::StorageConfig* storage_config);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.CreateInspectOperationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::InspectConfig* inspect_config_;
  ::google::privacy::dlp::v2beta1::StorageConfig* storage_config_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfoTypeStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InfoTypeStatistics) */ {
 public:
  InfoTypeStatistics();
  virtual ~InfoTypeStatistics();

  InfoTypeStatistics(const InfoTypeStatistics& from);

  inline InfoTypeStatistics& operator=(const InfoTypeStatistics& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoTypeStatistics& default_instance();

  static inline const InfoTypeStatistics* internal_default_instance() {
    return reinterpret_cast<const InfoTypeStatistics*>(
               &_InfoTypeStatistics_default_instance_);
  }

  void Swap(InfoTypeStatistics* other);

  // implements Message ----------------------------------------------

  inline InfoTypeStatistics* New() const PROTOBUF_FINAL { return New(NULL); }

  InfoTypeStatistics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InfoTypeStatistics& from);
  void MergeFrom(const InfoTypeStatistics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InfoTypeStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.privacy.dlp.v2beta1.InfoType info_type = 1;
  bool has_info_type() const;
  void clear_info_type();
  static const int kInfoTypeFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InfoType& info_type() const;
  ::google::privacy::dlp::v2beta1::InfoType* mutable_info_type();
  ::google::privacy::dlp::v2beta1::InfoType* release_info_type();
  void set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type);

  // int64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InfoTypeStatistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::privacy::dlp::v2beta1::InfoType* info_type_;
  ::google::protobuf::int64 count_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectOperationMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InspectOperationMetadata) */ {
 public:
  InspectOperationMetadata();
  virtual ~InspectOperationMetadata();

  InspectOperationMetadata(const InspectOperationMetadata& from);

  inline InspectOperationMetadata& operator=(const InspectOperationMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectOperationMetadata& default_instance();

  static inline const InspectOperationMetadata* internal_default_instance() {
    return reinterpret_cast<const InspectOperationMetadata*>(
               &_InspectOperationMetadata_default_instance_);
  }

  void Swap(InspectOperationMetadata* other);

  // implements Message ----------------------------------------------

  inline InspectOperationMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  InspectOperationMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InspectOperationMetadata& from);
  void MergeFrom(const InspectOperationMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InspectOperationMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
  int info_type_stats_size() const;
  void clear_info_type_stats();
  static const int kInfoTypeStatsFieldNumber = 2;
  const ::google::privacy::dlp::v2beta1::InfoTypeStatistics& info_type_stats(int index) const;
  ::google::privacy::dlp::v2beta1::InfoTypeStatistics* mutable_info_type_stats(int index);
  ::google::privacy::dlp::v2beta1::InfoTypeStatistics* add_info_type_stats();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeStatistics >*
      mutable_info_type_stats();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeStatistics >&
      info_type_stats() const;

  // .google.protobuf.Timestamp create_time = 3;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* mutable_create_time();
  ::google::protobuf::Timestamp* release_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // int64 processed_bytes = 1;
  void clear_processed_bytes();
  static const int kProcessedBytesFieldNumber = 1;
  ::google::protobuf::int64 processed_bytes() const;
  void set_processed_bytes(::google::protobuf::int64 value);

  // int64 total_estimated_bytes = 4;
  void clear_total_estimated_bytes();
  static const int kTotalEstimatedBytesFieldNumber = 4;
  ::google::protobuf::int64 total_estimated_bytes() const;
  void set_total_estimated_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectOperationMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeStatistics > info_type_stats_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::int64 processed_bytes_;
  ::google::protobuf::int64 total_estimated_bytes_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InspectOperationResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InspectOperationResult) */ {
 public:
  InspectOperationResult();
  virtual ~InspectOperationResult();

  InspectOperationResult(const InspectOperationResult& from);

  inline InspectOperationResult& operator=(const InspectOperationResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InspectOperationResult& default_instance();

  static inline const InspectOperationResult* internal_default_instance() {
    return reinterpret_cast<const InspectOperationResult*>(
               &_InspectOperationResult_default_instance_);
  }

  void Swap(InspectOperationResult* other);

  // implements Message ----------------------------------------------

  inline InspectOperationResult* New() const PROTOBUF_FINAL { return New(NULL); }

  InspectOperationResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InspectOperationResult& from);
  void MergeFrom(const InspectOperationResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InspectOperationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InspectOperationResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListInspectFindingsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ListInspectFindingsRequest) */ {
 public:
  ListInspectFindingsRequest();
  virtual ~ListInspectFindingsRequest();

  ListInspectFindingsRequest(const ListInspectFindingsRequest& from);

  inline ListInspectFindingsRequest& operator=(const ListInspectFindingsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInspectFindingsRequest& default_instance();

  static inline const ListInspectFindingsRequest* internal_default_instance() {
    return reinterpret_cast<const ListInspectFindingsRequest*>(
               &_ListInspectFindingsRequest_default_instance_);
  }

  void Swap(ListInspectFindingsRequest* other);

  // implements Message ----------------------------------------------

  inline ListInspectFindingsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListInspectFindingsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListInspectFindingsRequest& from);
  void MergeFrom(const ListInspectFindingsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListInspectFindingsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ListInspectFindingsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListInspectFindingsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ListInspectFindingsResponse) */ {
 public:
  ListInspectFindingsResponse();
  virtual ~ListInspectFindingsResponse();

  ListInspectFindingsResponse(const ListInspectFindingsResponse& from);

  inline ListInspectFindingsResponse& operator=(const ListInspectFindingsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInspectFindingsResponse& default_instance();

  static inline const ListInspectFindingsResponse* internal_default_instance() {
    return reinterpret_cast<const ListInspectFindingsResponse*>(
               &_ListInspectFindingsResponse_default_instance_);
  }

  void Swap(ListInspectFindingsResponse* other);

  // implements Message ----------------------------------------------

  inline ListInspectFindingsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListInspectFindingsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListInspectFindingsResponse& from);
  void MergeFrom(const ListInspectFindingsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListInspectFindingsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // .google.privacy.dlp.v2beta1.InspectResult result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InspectResult& result() const;
  ::google::privacy::dlp::v2beta1::InspectResult* mutable_result();
  ::google::privacy::dlp::v2beta1::InspectResult* release_result();
  void set_allocated_result(::google::privacy::dlp::v2beta1::InspectResult* result);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ListInspectFindingsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  ::google::privacy::dlp::v2beta1::InspectResult* result_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfoTypeDescription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.InfoTypeDescription) */ {
 public:
  InfoTypeDescription();
  virtual ~InfoTypeDescription();

  InfoTypeDescription(const InfoTypeDescription& from);

  inline InfoTypeDescription& operator=(const InfoTypeDescription& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoTypeDescription& default_instance();

  static inline const InfoTypeDescription* internal_default_instance() {
    return reinterpret_cast<const InfoTypeDescription*>(
               &_InfoTypeDescription_default_instance_);
  }

  void Swap(InfoTypeDescription* other);

  // implements Message ----------------------------------------------

  inline InfoTypeDescription* New() const PROTOBUF_FINAL { return New(NULL); }

  InfoTypeDescription* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InfoTypeDescription& from);
  void MergeFrom(const InfoTypeDescription& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InfoTypeDescription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 3;
  const ::google::privacy::dlp::v2beta1::CategoryDescription& categories(int index) const;
  ::google::privacy::dlp::v2beta1::CategoryDescription* mutable_categories(int index);
  ::google::privacy::dlp::v2beta1::CategoryDescription* add_categories();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >*
      mutable_categories();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >&
      categories() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.InfoTypeDescription)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription > categories_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListInfoTypesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ListInfoTypesRequest) */ {
 public:
  ListInfoTypesRequest();
  virtual ~ListInfoTypesRequest();

  ListInfoTypesRequest(const ListInfoTypesRequest& from);

  inline ListInfoTypesRequest& operator=(const ListInfoTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInfoTypesRequest& default_instance();

  static inline const ListInfoTypesRequest* internal_default_instance() {
    return reinterpret_cast<const ListInfoTypesRequest*>(
               &_ListInfoTypesRequest_default_instance_);
  }

  void Swap(ListInfoTypesRequest* other);

  // implements Message ----------------------------------------------

  inline ListInfoTypesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListInfoTypesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListInfoTypesRequest& from);
  void MergeFrom(const ListInfoTypesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListInfoTypesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string category = 1;
  void clear_category();
  static const int kCategoryFieldNumber = 1;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // string language_code = 2;
  void clear_language_code();
  static const int kLanguageCodeFieldNumber = 2;
  const ::std::string& language_code() const;
  void set_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_language_code(::std::string&& value);
  #endif
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  ::std::string* mutable_language_code();
  ::std::string* release_language_code();
  void set_allocated_language_code(::std::string* language_code);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ListInfoTypesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::internal::ArenaStringPtr language_code_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListInfoTypesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ListInfoTypesResponse) */ {
 public:
  ListInfoTypesResponse();
  virtual ~ListInfoTypesResponse();

  ListInfoTypesResponse(const ListInfoTypesResponse& from);

  inline ListInfoTypesResponse& operator=(const ListInfoTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInfoTypesResponse& default_instance();

  static inline const ListInfoTypesResponse* internal_default_instance() {
    return reinterpret_cast<const ListInfoTypesResponse*>(
               &_ListInfoTypesResponse_default_instance_);
  }

  void Swap(ListInfoTypesResponse* other);

  // implements Message ----------------------------------------------

  inline ListInfoTypesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListInfoTypesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListInfoTypesResponse& from);
  void MergeFrom(const ListInfoTypesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListInfoTypesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
  int info_types_size() const;
  void clear_info_types();
  static const int kInfoTypesFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::InfoTypeDescription& info_types(int index) const;
  ::google::privacy::dlp::v2beta1::InfoTypeDescription* mutable_info_types(int index);
  ::google::privacy::dlp::v2beta1::InfoTypeDescription* add_info_types();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeDescription >*
      mutable_info_types();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeDescription >&
      info_types() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ListInfoTypesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeDescription > info_types_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CategoryDescription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.CategoryDescription) */ {
 public:
  CategoryDescription();
  virtual ~CategoryDescription();

  CategoryDescription(const CategoryDescription& from);

  inline CategoryDescription& operator=(const CategoryDescription& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CategoryDescription& default_instance();

  static inline const CategoryDescription* internal_default_instance() {
    return reinterpret_cast<const CategoryDescription*>(
               &_CategoryDescription_default_instance_);
  }

  void Swap(CategoryDescription* other);

  // implements Message ----------------------------------------------

  inline CategoryDescription* New() const PROTOBUF_FINAL { return New(NULL); }

  CategoryDescription* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CategoryDescription& from);
  void MergeFrom(const CategoryDescription& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CategoryDescription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.CategoryDescription)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListRootCategoriesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ListRootCategoriesRequest) */ {
 public:
  ListRootCategoriesRequest();
  virtual ~ListRootCategoriesRequest();

  ListRootCategoriesRequest(const ListRootCategoriesRequest& from);

  inline ListRootCategoriesRequest& operator=(const ListRootCategoriesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRootCategoriesRequest& default_instance();

  static inline const ListRootCategoriesRequest* internal_default_instance() {
    return reinterpret_cast<const ListRootCategoriesRequest*>(
               &_ListRootCategoriesRequest_default_instance_);
  }

  void Swap(ListRootCategoriesRequest* other);

  // implements Message ----------------------------------------------

  inline ListRootCategoriesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRootCategoriesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRootCategoriesRequest& from);
  void MergeFrom(const ListRootCategoriesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRootCategoriesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string language_code = 1;
  void clear_language_code();
  static const int kLanguageCodeFieldNumber = 1;
  const ::std::string& language_code() const;
  void set_language_code(const ::std::string& value);
  #if LANG_CXX11
  void set_language_code(::std::string&& value);
  #endif
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  ::std::string* mutable_language_code();
  ::std::string* release_language_code();
  void set_allocated_language_code(::std::string* language_code);

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ListRootCategoriesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr language_code_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListRootCategoriesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.privacy.dlp.v2beta1.ListRootCategoriesResponse) */ {
 public:
  ListRootCategoriesResponse();
  virtual ~ListRootCategoriesResponse();

  ListRootCategoriesResponse(const ListRootCategoriesResponse& from);

  inline ListRootCategoriesResponse& operator=(const ListRootCategoriesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRootCategoriesResponse& default_instance();

  static inline const ListRootCategoriesResponse* internal_default_instance() {
    return reinterpret_cast<const ListRootCategoriesResponse*>(
               &_ListRootCategoriesResponse_default_instance_);
  }

  void Swap(ListRootCategoriesResponse* other);

  // implements Message ----------------------------------------------

  inline ListRootCategoriesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRootCategoriesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRootCategoriesResponse& from);
  void MergeFrom(const ListRootCategoriesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRootCategoriesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
  int categories_size() const;
  void clear_categories();
  static const int kCategoriesFieldNumber = 1;
  const ::google::privacy::dlp::v2beta1::CategoryDescription& categories(int index) const;
  ::google::privacy::dlp::v2beta1::CategoryDescription* mutable_categories(int index);
  ::google::privacy::dlp::v2beta1::CategoryDescription* add_categories();
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >*
      mutable_categories();
  const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >&
      categories() const;

  // @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta1.ListRootCategoriesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription > categories_;
  mutable int _cached_size_;
  friend struct  protobuf_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// InspectConfig

// repeated .google.privacy.dlp.v2beta1.InfoType info_types = 1;
inline int InspectConfig::info_types_size() const {
  return info_types_.size();
}
inline void InspectConfig::clear_info_types() {
  info_types_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::InfoType& InspectConfig::info_types(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::InfoType* InspectConfig::mutable_info_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::InfoType* InspectConfig::add_info_types() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >*
InspectConfig::mutable_info_types() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return &info_types_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoType >&
InspectConfig::info_types() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectConfig.info_types)
  return info_types_;
}

// .google.privacy.dlp.v2beta1.Likelihood min_likelihood = 2;
inline void InspectConfig::clear_min_likelihood() {
  min_likelihood_ = 0;
}
inline ::google::privacy::dlp::v2beta1::Likelihood InspectConfig::min_likelihood() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.min_likelihood)
  return static_cast< ::google::privacy::dlp::v2beta1::Likelihood >(min_likelihood_);
}
inline void InspectConfig::set_min_likelihood(::google::privacy::dlp::v2beta1::Likelihood value) {
  
  min_likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.min_likelihood)
}

// int32 max_findings = 3;
inline void InspectConfig::clear_max_findings() {
  max_findings_ = 0;
}
inline ::google::protobuf::int32 InspectConfig::max_findings() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.max_findings)
  return max_findings_;
}
inline void InspectConfig::set_max_findings(::google::protobuf::int32 value) {
  
  max_findings_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.max_findings)
}

// bool include_quote = 4;
inline void InspectConfig::clear_include_quote() {
  include_quote_ = false;
}
inline bool InspectConfig::include_quote() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.include_quote)
  return include_quote_;
}
inline void InspectConfig::set_include_quote(bool value) {
  
  include_quote_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.include_quote)
}

// bool exclude_types = 6;
inline void InspectConfig::clear_exclude_types() {
  exclude_types_ = false;
}
inline bool InspectConfig::exclude_types() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectConfig.exclude_types)
  return exclude_types_;
}
inline void InspectConfig::set_exclude_types(bool value) {
  
  exclude_types_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectConfig.exclude_types)
}

// -------------------------------------------------------------------

// ContentItem

// string type = 1;
inline void ContentItem::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContentItem::type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ContentItem.type)
  return type_.GetNoArena();
}
inline void ContentItem::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.type)
}
#if LANG_CXX11
inline void ContentItem::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ContentItem.type)
}
#endif
inline void ContentItem::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ContentItem.type)
}
inline void ContentItem::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ContentItem.type)
}
inline ::std::string* ContentItem::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ContentItem.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentItem::release_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ContentItem.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentItem::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ContentItem.type)
}

// bytes data = 2;
inline bool ContentItem::has_data() const {
  return data_item_case() == kData;
}
inline void ContentItem::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void ContentItem::clear_data() {
  if (has_data()) {
    data_item_.data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data_item();
  }
}
inline const ::std::string& ContentItem::data() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ContentItem.data)
  if (has_data()) {
    return data_item_.data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ContentItem::set_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.data)
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.data)
}
#if LANG_CXX11
inline void ContentItem::set_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.data)
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ContentItem.data)
}
#endif
inline void ContentItem::set_data(const char* value) {
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ContentItem.data)
}
inline void ContentItem::set_data(const void* value, size_t size) {
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ContentItem.data)
}
inline ::std::string* ContentItem::mutable_data() {
  if (!has_data()) {
    clear_data_item();
    set_has_data();
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ContentItem.data)
  return data_item_.data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentItem::release_data() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ContentItem.data)
  if (has_data()) {
    clear_has_data_item();
    return data_item_.data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ContentItem::set_allocated_data(::std::string* data) {
  if (!has_data()) {
    data_item_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_item();
  if (data != NULL) {
    set_has_data();
    data_item_.data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        data);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ContentItem.data)
}

// string value = 3;
inline bool ContentItem::has_value() const {
  return data_item_case() == kValue;
}
inline void ContentItem::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void ContentItem::clear_value() {
  if (has_value()) {
    data_item_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data_item();
  }
}
inline const ::std::string& ContentItem::value() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ContentItem.value)
  if (has_value()) {
    return data_item_.value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ContentItem::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.value)
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.value)
}
#if LANG_CXX11
inline void ContentItem::set_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ContentItem.value)
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ContentItem.value)
}
#endif
inline void ContentItem::set_value(const char* value) {
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ContentItem.value)
}
inline void ContentItem::set_value(const char* value, size_t size) {
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_item_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ContentItem.value)
}
inline ::std::string* ContentItem::mutable_value() {
  if (!has_value()) {
    clear_data_item();
    set_has_value();
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ContentItem.value)
  return data_item_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentItem::release_value() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ContentItem.value)
  if (has_value()) {
    clear_has_data_item();
    return data_item_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ContentItem::set_allocated_value(::std::string* value) {
  if (!has_value()) {
    data_item_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_item();
  if (value != NULL) {
    set_has_value();
    data_item_.value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ContentItem.value)
}

inline bool ContentItem::has_data_item() const {
  return data_item_case() != DATA_ITEM_NOT_SET;
}
inline void ContentItem::clear_has_data_item() {
  _oneof_case_[0] = DATA_ITEM_NOT_SET;
}
inline ContentItem::DataItemCase ContentItem::data_item_case() const {
  return ContentItem::DataItemCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InspectResult

// repeated .google.privacy.dlp.v2beta1.Finding findings = 1;
inline int InspectResult::findings_size() const {
  return findings_.size();
}
inline void InspectResult::clear_findings() {
  findings_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::Finding& InspectResult::findings(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::Finding* InspectResult::mutable_findings(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::Finding* InspectResult::add_findings() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Finding >*
InspectResult::mutable_findings() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectResult.findings)
  return &findings_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::Finding >&
InspectResult::findings() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectResult.findings)
  return findings_;
}

// bool findings_truncated = 2;
inline void InspectResult::clear_findings_truncated() {
  findings_truncated_ = false;
}
inline bool InspectResult::findings_truncated() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectResult.findings_truncated)
  return findings_truncated_;
}
inline void InspectResult::set_findings_truncated(bool value) {
  
  findings_truncated_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectResult.findings_truncated)
}

// -------------------------------------------------------------------

// Finding

// string quote = 1;
inline void Finding::clear_quote() {
  quote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Finding::quote() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.quote)
  return quote_.GetNoArena();
}
inline void Finding::set_quote(const ::std::string& value) {
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Finding.quote)
}
#if LANG_CXX11
inline void Finding::set_quote(::std::string&& value) {
  
  quote_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.Finding.quote)
}
#endif
inline void Finding::set_quote(const char* value) {
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.Finding.quote)
}
inline void Finding::set_quote(const char* value, size_t size) {
  
  quote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.Finding.quote)
}
inline ::std::string* Finding::mutable_quote() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.quote)
  return quote_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Finding::release_quote() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.quote)
  
  return quote_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Finding::set_allocated_quote(::std::string* quote) {
  if (quote != NULL) {
    
  } else {
    
  }
  quote_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quote);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.quote)
}

// .google.privacy.dlp.v2beta1.InfoType info_type = 2;
inline bool Finding::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
inline void Finding::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) delete info_type_;
  info_type_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::InfoType& Finding::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.info_type)
  return info_type_ != NULL ? *info_type_
                         : *::google::privacy::dlp::v2beta1::InfoType::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::InfoType* Finding::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.info_type)
  return info_type_;
}
inline ::google::privacy::dlp::v2beta1::InfoType* Finding::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
inline void Finding::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  delete info_type_;
  info_type_ = info_type;
  if (info_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.info_type)
}

// .google.privacy.dlp.v2beta1.Likelihood likelihood = 3;
inline void Finding::clear_likelihood() {
  likelihood_ = 0;
}
inline ::google::privacy::dlp::v2beta1::Likelihood Finding::likelihood() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.likelihood)
  return static_cast< ::google::privacy::dlp::v2beta1::Likelihood >(likelihood_);
}
inline void Finding::set_likelihood(::google::privacy::dlp::v2beta1::Likelihood value) {
  
  likelihood_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Finding.likelihood)
}

// .google.privacy.dlp.v2beta1.Location location = 4;
inline bool Finding::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void Finding::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Location& Finding::location() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.location)
  return location_ != NULL ? *location_
                         : *::google::privacy::dlp::v2beta1::Location::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::Location* Finding::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::google::privacy::dlp::v2beta1::Location;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.location)
  return location_;
}
inline ::google::privacy::dlp::v2beta1::Location* Finding::release_location() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.location)
  
  ::google::privacy::dlp::v2beta1::Location* temp = location_;
  location_ = NULL;
  return temp;
}
inline void Finding::set_allocated_location(::google::privacy::dlp::v2beta1::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.location)
}

// .google.protobuf.Timestamp create_time = 6;
inline bool Finding::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline void Finding::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
inline const ::google::protobuf::Timestamp& Finding::create_time() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Finding.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* Finding::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Finding.create_time)
  return create_time_;
}
inline ::google::protobuf::Timestamp* Finding::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Finding.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline void Finding::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Finding.create_time)
}

// -------------------------------------------------------------------

// Location

// .google.privacy.dlp.v2beta1.Range byte_range = 1;
inline bool Location::has_byte_range() const {
  return this != internal_default_instance() && byte_range_ != NULL;
}
inline void Location::clear_byte_range() {
  if (GetArenaNoVirtual() == NULL && byte_range_ != NULL) delete byte_range_;
  byte_range_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Range& Location::byte_range() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.byte_range)
  return byte_range_ != NULL ? *byte_range_
                         : *::google::privacy::dlp::v2beta1::Range::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::Range* Location::mutable_byte_range() {
  
  if (byte_range_ == NULL) {
    byte_range_ = new ::google::privacy::dlp::v2beta1::Range;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.byte_range)
  return byte_range_;
}
inline ::google::privacy::dlp::v2beta1::Range* Location::release_byte_range() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.byte_range)
  
  ::google::privacy::dlp::v2beta1::Range* temp = byte_range_;
  byte_range_ = NULL;
  return temp;
}
inline void Location::set_allocated_byte_range(::google::privacy::dlp::v2beta1::Range* byte_range) {
  delete byte_range_;
  byte_range_ = byte_range;
  if (byte_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.byte_range)
}

// .google.privacy.dlp.v2beta1.Range codepoint_range = 2;
inline bool Location::has_codepoint_range() const {
  return this != internal_default_instance() && codepoint_range_ != NULL;
}
inline void Location::clear_codepoint_range() {
  if (GetArenaNoVirtual() == NULL && codepoint_range_ != NULL) delete codepoint_range_;
  codepoint_range_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::Range& Location::codepoint_range() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.codepoint_range)
  return codepoint_range_ != NULL ? *codepoint_range_
                         : *::google::privacy::dlp::v2beta1::Range::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::Range* Location::mutable_codepoint_range() {
  
  if (codepoint_range_ == NULL) {
    codepoint_range_ = new ::google::privacy::dlp::v2beta1::Range;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.codepoint_range)
  return codepoint_range_;
}
inline ::google::privacy::dlp::v2beta1::Range* Location::release_codepoint_range() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.codepoint_range)
  
  ::google::privacy::dlp::v2beta1::Range* temp = codepoint_range_;
  codepoint_range_ = NULL;
  return temp;
}
inline void Location::set_allocated_codepoint_range(::google::privacy::dlp::v2beta1::Range* codepoint_range) {
  delete codepoint_range_;
  codepoint_range_ = codepoint_range;
  if (codepoint_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.codepoint_range)
}

// repeated .google.privacy.dlp.v2beta1.ImageLocation image_boxes = 3;
inline int Location::image_boxes_size() const {
  return image_boxes_.size();
}
inline void Location::clear_image_boxes() {
  image_boxes_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::ImageLocation& Location::image_boxes(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::ImageLocation* Location::mutable_image_boxes(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::ImageLocation* Location::add_image_boxes() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ImageLocation >*
Location::mutable_image_boxes() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.Location.image_boxes)
  return &image_boxes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ImageLocation >&
Location::image_boxes() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.Location.image_boxes)
  return image_boxes_;
}

// .google.privacy.dlp.v2beta1.RecordKey record_key = 4;
inline bool Location::has_record_key() const {
  return this != internal_default_instance() && record_key_ != NULL;
}
inline void Location::clear_record_key() {
  if (GetArenaNoVirtual() == NULL && record_key_ != NULL) delete record_key_;
  record_key_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::RecordKey& Location::record_key() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.record_key)
  return record_key_ != NULL ? *record_key_
                         : *::google::privacy::dlp::v2beta1::RecordKey::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::RecordKey* Location::mutable_record_key() {
  
  if (record_key_ == NULL) {
    record_key_ = new ::google::privacy::dlp::v2beta1::RecordKey;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.record_key)
  return record_key_;
}
inline ::google::privacy::dlp::v2beta1::RecordKey* Location::release_record_key() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.record_key)
  
  ::google::privacy::dlp::v2beta1::RecordKey* temp = record_key_;
  record_key_ = NULL;
  return temp;
}
inline void Location::set_allocated_record_key(::google::privacy::dlp::v2beta1::RecordKey* record_key) {
  delete record_key_;
  record_key_ = record_key;
  if (record_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.record_key)
}

// .google.privacy.dlp.v2beta1.FieldId field_id = 5;
inline bool Location::has_field_id() const {
  return this != internal_default_instance() && field_id_ != NULL;
}
inline void Location::clear_field_id() {
  if (GetArenaNoVirtual() == NULL && field_id_ != NULL) delete field_id_;
  field_id_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::FieldId& Location::field_id() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Location.field_id)
  return field_id_ != NULL ? *field_id_
                         : *::google::privacy::dlp::v2beta1::FieldId::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::FieldId* Location::mutable_field_id() {
  
  if (field_id_ == NULL) {
    field_id_ = new ::google::privacy::dlp::v2beta1::FieldId;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.Location.field_id)
  return field_id_;
}
inline ::google::privacy::dlp::v2beta1::FieldId* Location::release_field_id() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.Location.field_id)
  
  ::google::privacy::dlp::v2beta1::FieldId* temp = field_id_;
  field_id_ = NULL;
  return temp;
}
inline void Location::set_allocated_field_id(::google::privacy::dlp::v2beta1::FieldId* field_id) {
  delete field_id_;
  field_id_ = field_id;
  if (field_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.Location.field_id)
}

// -------------------------------------------------------------------

// Range

// int64 start = 1;
inline void Range::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Range::start() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Range.start)
  return start_;
}
inline void Range::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Range.start)
}

// int64 end = 2;
inline void Range::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Range::end() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.Range.end)
  return end_;
}
inline void Range::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.Range.end)
}

// -------------------------------------------------------------------

// ImageLocation

// int32 top = 1;
inline void ImageLocation::clear_top() {
  top_ = 0;
}
inline ::google::protobuf::int32 ImageLocation::top() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.top)
  return top_;
}
inline void ImageLocation::set_top(::google::protobuf::int32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.top)
}

// int32 left = 2;
inline void ImageLocation::clear_left() {
  left_ = 0;
}
inline ::google::protobuf::int32 ImageLocation::left() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.left)
  return left_;
}
inline void ImageLocation::set_left(::google::protobuf::int32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.left)
}

// int32 width = 3;
inline void ImageLocation::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 ImageLocation::width() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.width)
  return width_;
}
inline void ImageLocation::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.width)
}

// int32 height = 4;
inline void ImageLocation::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 ImageLocation::height() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ImageLocation.height)
  return height_;
}
inline void ImageLocation::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ImageLocation.height)
}

// -------------------------------------------------------------------

// RedactContentRequest_ReplaceConfig

// .google.privacy.dlp.v2beta1.InfoType info_type = 1;
inline bool RedactContentRequest_ReplaceConfig::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
inline void RedactContentRequest_ReplaceConfig::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) delete info_type_;
  info_type_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::InfoType& RedactContentRequest_ReplaceConfig::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
  return info_type_ != NULL ? *info_type_
                         : *::google::privacy::dlp::v2beta1::InfoType::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::InfoType* RedactContentRequest_ReplaceConfig::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
  return info_type_;
}
inline ::google::privacy::dlp::v2beta1::InfoType* RedactContentRequest_ReplaceConfig::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
inline void RedactContentRequest_ReplaceConfig::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  delete info_type_;
  info_type_ = info_type;
  if (info_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.info_type)
}

// string replace_with = 2;
inline void RedactContentRequest_ReplaceConfig::clear_replace_with() {
  replace_with_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RedactContentRequest_ReplaceConfig::replace_with() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
  return replace_with_.GetNoArena();
}
inline void RedactContentRequest_ReplaceConfig::set_replace_with(const ::std::string& value) {
  
  replace_with_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
#if LANG_CXX11
inline void RedactContentRequest_ReplaceConfig::set_replace_with(::std::string&& value) {
  
  replace_with_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
#endif
inline void RedactContentRequest_ReplaceConfig::set_replace_with(const char* value) {
  
  replace_with_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
inline void RedactContentRequest_ReplaceConfig::set_replace_with(const char* value, size_t size) {
  
  replace_with_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}
inline ::std::string* RedactContentRequest_ReplaceConfig::mutable_replace_with() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
  return replace_with_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedactContentRequest_ReplaceConfig::release_replace_with() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
  
  return replace_with_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedactContentRequest_ReplaceConfig::set_allocated_replace_with(::std::string* replace_with) {
  if (replace_with != NULL) {
    
  } else {
    
  }
  replace_with_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replace_with);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig.replace_with)
}

// -------------------------------------------------------------------

// RedactContentRequest

// .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
inline bool RedactContentRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
inline void RedactContentRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) delete inspect_config_;
  inspect_config_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::InspectConfig& RedactContentRequest::inspect_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
  return inspect_config_ != NULL ? *inspect_config_
                         : *::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* RedactContentRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
  return inspect_config_;
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* RedactContentRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
inline void RedactContentRequest::set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config) {
  delete inspect_config_;
  inspect_config_ = inspect_config;
  if (inspect_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.RedactContentRequest.inspect_config)
}

// repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
inline int RedactContentRequest::items_size() const {
  return items_.size();
}
inline void RedactContentRequest::clear_items() {
  items_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::ContentItem& RedactContentRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* RedactContentRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* RedactContentRequest::add_items() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
RedactContentRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
RedactContentRequest::items() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RedactContentRequest.items)
  return items_;
}

// repeated .google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig replace_configs = 3;
inline int RedactContentRequest::replace_configs_size() const {
  return replace_configs_.size();
}
inline void RedactContentRequest::clear_replace_configs() {
  replace_configs_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig& RedactContentRequest::replace_configs(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig* RedactContentRequest::mutable_replace_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig* RedactContentRequest::add_replace_configs() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig >*
RedactContentRequest::mutable_replace_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return &replace_configs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::RedactContentRequest_ReplaceConfig >&
RedactContentRequest::replace_configs() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RedactContentRequest.replace_configs)
  return replace_configs_;
}

// -------------------------------------------------------------------

// RedactContentResponse

// repeated .google.privacy.dlp.v2beta1.ContentItem items = 1;
inline int RedactContentResponse::items_size() const {
  return items_.size();
}
inline void RedactContentResponse::clear_items() {
  items_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::ContentItem& RedactContentResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* RedactContentResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* RedactContentResponse::add_items() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
RedactContentResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
RedactContentResponse::items() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.RedactContentResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// InspectContentRequest

// .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
inline bool InspectContentRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
inline void InspectContentRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) delete inspect_config_;
  inspect_config_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::InspectConfig& InspectContentRequest::inspect_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
  return inspect_config_ != NULL ? *inspect_config_
                         : *::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* InspectContentRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
  return inspect_config_;
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* InspectContentRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
inline void InspectContentRequest::set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config) {
  delete inspect_config_;
  inspect_config_ = inspect_config;
  if (inspect_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectContentRequest.inspect_config)
}

// repeated .google.privacy.dlp.v2beta1.ContentItem items = 2;
inline int InspectContentRequest::items_size() const {
  return items_.size();
}
inline void InspectContentRequest::clear_items() {
  items_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::ContentItem& InspectContentRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* InspectContentRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::ContentItem* InspectContentRequest::add_items() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >*
InspectContentRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::ContentItem >&
InspectContentRequest::items() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectContentRequest.items)
  return items_;
}

// -------------------------------------------------------------------

// InspectContentResponse

// repeated .google.privacy.dlp.v2beta1.InspectResult results = 1;
inline int InspectContentResponse::results_size() const {
  return results_.size();
}
inline void InspectContentResponse::clear_results() {
  results_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::InspectResult& InspectContentResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::InspectResult* InspectContentResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::InspectResult* InspectContentResponse::add_results() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectResult >*
InspectContentResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InspectResult >&
InspectContentResponse::results() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectContentResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// CreateInspectOperationRequest

// .google.privacy.dlp.v2beta1.InspectConfig inspect_config = 1;
inline bool CreateInspectOperationRequest::has_inspect_config() const {
  return this != internal_default_instance() && inspect_config_ != NULL;
}
inline void CreateInspectOperationRequest::clear_inspect_config() {
  if (GetArenaNoVirtual() == NULL && inspect_config_ != NULL) delete inspect_config_;
  inspect_config_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::InspectConfig& CreateInspectOperationRequest::inspect_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
  return inspect_config_ != NULL ? *inspect_config_
                         : *::google::privacy::dlp::v2beta1::InspectConfig::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* CreateInspectOperationRequest::mutable_inspect_config() {
  
  if (inspect_config_ == NULL) {
    inspect_config_ = new ::google::privacy::dlp::v2beta1::InspectConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
  return inspect_config_;
}
inline ::google::privacy::dlp::v2beta1::InspectConfig* CreateInspectOperationRequest::release_inspect_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
  
  ::google::privacy::dlp::v2beta1::InspectConfig* temp = inspect_config_;
  inspect_config_ = NULL;
  return temp;
}
inline void CreateInspectOperationRequest::set_allocated_inspect_config(::google::privacy::dlp::v2beta1::InspectConfig* inspect_config) {
  delete inspect_config_;
  inspect_config_ = inspect_config;
  if (inspect_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.inspect_config)
}

// .google.privacy.dlp.v2beta1.StorageConfig storage_config = 2;
inline bool CreateInspectOperationRequest::has_storage_config() const {
  return this != internal_default_instance() && storage_config_ != NULL;
}
inline void CreateInspectOperationRequest::clear_storage_config() {
  if (GetArenaNoVirtual() == NULL && storage_config_ != NULL) delete storage_config_;
  storage_config_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::StorageConfig& CreateInspectOperationRequest::storage_config() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
  return storage_config_ != NULL ? *storage_config_
                         : *::google::privacy::dlp::v2beta1::StorageConfig::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::StorageConfig* CreateInspectOperationRequest::mutable_storage_config() {
  
  if (storage_config_ == NULL) {
    storage_config_ = new ::google::privacy::dlp::v2beta1::StorageConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
  return storage_config_;
}
inline ::google::privacy::dlp::v2beta1::StorageConfig* CreateInspectOperationRequest::release_storage_config() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
  
  ::google::privacy::dlp::v2beta1::StorageConfig* temp = storage_config_;
  storage_config_ = NULL;
  return temp;
}
inline void CreateInspectOperationRequest::set_allocated_storage_config(::google::privacy::dlp::v2beta1::StorageConfig* storage_config) {
  delete storage_config_;
  storage_config_ = storage_config;
  if (storage_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CreateInspectOperationRequest.storage_config)
}

// -------------------------------------------------------------------

// InfoTypeStatistics

// .google.privacy.dlp.v2beta1.InfoType info_type = 1;
inline bool InfoTypeStatistics::has_info_type() const {
  return this != internal_default_instance() && info_type_ != NULL;
}
inline void InfoTypeStatistics::clear_info_type() {
  if (GetArenaNoVirtual() == NULL && info_type_ != NULL) delete info_type_;
  info_type_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::InfoType& InfoTypeStatistics::info_type() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
  return info_type_ != NULL ? *info_type_
                         : *::google::privacy::dlp::v2beta1::InfoType::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::InfoType* InfoTypeStatistics::mutable_info_type() {
  
  if (info_type_ == NULL) {
    info_type_ = new ::google::privacy::dlp::v2beta1::InfoType;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
  return info_type_;
}
inline ::google::privacy::dlp::v2beta1::InfoType* InfoTypeStatistics::release_info_type() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
  
  ::google::privacy::dlp::v2beta1::InfoType* temp = info_type_;
  info_type_ = NULL;
  return temp;
}
inline void InfoTypeStatistics::set_allocated_info_type(::google::privacy::dlp::v2beta1::InfoType* info_type) {
  delete info_type_;
  info_type_ = info_type;
  if (info_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InfoTypeStatistics.info_type)
}

// int64 count = 2;
inline void InfoTypeStatistics::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InfoTypeStatistics::count() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeStatistics.count)
  return count_;
}
inline void InfoTypeStatistics::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InfoTypeStatistics.count)
}

// -------------------------------------------------------------------

// InspectOperationMetadata

// int64 processed_bytes = 1;
inline void InspectOperationMetadata::clear_processed_bytes() {
  processed_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InspectOperationMetadata::processed_bytes() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.processed_bytes)
  return processed_bytes_;
}
inline void InspectOperationMetadata::set_processed_bytes(::google::protobuf::int64 value) {
  
  processed_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectOperationMetadata.processed_bytes)
}

// int64 total_estimated_bytes = 4;
inline void InspectOperationMetadata::clear_total_estimated_bytes() {
  total_estimated_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InspectOperationMetadata::total_estimated_bytes() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.total_estimated_bytes)
  return total_estimated_bytes_;
}
inline void InspectOperationMetadata::set_total_estimated_bytes(::google::protobuf::int64 value) {
  
  total_estimated_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectOperationMetadata.total_estimated_bytes)
}

// repeated .google.privacy.dlp.v2beta1.InfoTypeStatistics info_type_stats = 2;
inline int InspectOperationMetadata::info_type_stats_size() const {
  return info_type_stats_.size();
}
inline void InspectOperationMetadata::clear_info_type_stats() {
  info_type_stats_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::InfoTypeStatistics& InspectOperationMetadata::info_type_stats(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::InfoTypeStatistics* InspectOperationMetadata::mutable_info_type_stats(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::InfoTypeStatistics* InspectOperationMetadata::add_info_type_stats() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeStatistics >*
InspectOperationMetadata::mutable_info_type_stats() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return &info_type_stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeStatistics >&
InspectOperationMetadata::info_type_stats() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InspectOperationMetadata.info_type_stats)
  return info_type_stats_;
}

// .google.protobuf.Timestamp create_time = 3;
inline bool InspectOperationMetadata::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline void InspectOperationMetadata::clear_create_time() {
  if (GetArenaNoVirtual() == NULL && create_time_ != NULL) delete create_time_;
  create_time_ = NULL;
}
inline const ::google::protobuf::Timestamp& InspectOperationMetadata::create_time() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
  return create_time_ != NULL ? *create_time_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* InspectOperationMetadata::mutable_create_time() {
  
  if (create_time_ == NULL) {
    create_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
  return create_time_;
}
inline ::google::protobuf::Timestamp* InspectOperationMetadata::release_create_time() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline void InspectOperationMetadata::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  delete create_time_;
  if (create_time != NULL && create_time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_create_time = new ::google::protobuf::Timestamp;
    new_create_time->CopyFrom(*create_time);
    create_time = new_create_time;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectOperationMetadata.create_time)
}

// -------------------------------------------------------------------

// InspectOperationResult

// string name = 1;
inline void InspectOperationResult::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InspectOperationResult::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InspectOperationResult.name)
  return name_.GetNoArena();
}
inline void InspectOperationResult::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
#if LANG_CXX11
inline void InspectOperationResult::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
#endif
inline void InspectOperationResult::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
inline void InspectOperationResult::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}
inline ::std::string* InspectOperationResult::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InspectOperationResult.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InspectOperationResult::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InspectOperationResult.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InspectOperationResult::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InspectOperationResult.name)
}

// -------------------------------------------------------------------

// ListInspectFindingsRequest

// string name = 1;
inline void ListInspectFindingsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInspectFindingsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
  return name_.GetNoArena();
}
inline void ListInspectFindingsRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
#if LANG_CXX11
inline void ListInspectFindingsRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
#endif
inline void ListInspectFindingsRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
inline void ListInspectFindingsRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}
inline ::std::string* ListInspectFindingsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInspectFindingsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInspectFindingsRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.name)
}

// int32 page_size = 2;
inline void ListInspectFindingsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListInspectFindingsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_size)
  return page_size_;
}
inline void ListInspectFindingsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_size)
}

// string page_token = 3;
inline void ListInspectFindingsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInspectFindingsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListInspectFindingsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
#if LANG_CXX11
inline void ListInspectFindingsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
#endif
inline void ListInspectFindingsRequest::set_page_token(const char* value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
inline void ListInspectFindingsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}
inline ::std::string* ListInspectFindingsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInspectFindingsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInspectFindingsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsRequest.page_token)
}

// -------------------------------------------------------------------

// ListInspectFindingsResponse

// .google.privacy.dlp.v2beta1.InspectResult result = 1;
inline bool ListInspectFindingsResponse::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void ListInspectFindingsResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
inline const ::google::privacy::dlp::v2beta1::InspectResult& ListInspectFindingsResponse::result() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
  return result_ != NULL ? *result_
                         : *::google::privacy::dlp::v2beta1::InspectResult::internal_default_instance();
}
inline ::google::privacy::dlp::v2beta1::InspectResult* ListInspectFindingsResponse::mutable_result() {
  
  if (result_ == NULL) {
    result_ = new ::google::privacy::dlp::v2beta1::InspectResult;
  }
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
  return result_;
}
inline ::google::privacy::dlp::v2beta1::InspectResult* ListInspectFindingsResponse::release_result() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
  
  ::google::privacy::dlp::v2beta1::InspectResult* temp = result_;
  result_ = NULL;
  return temp;
}
inline void ListInspectFindingsResponse::set_allocated_result(::google::privacy::dlp::v2beta1::InspectResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.result)
}

// string next_page_token = 2;
inline void ListInspectFindingsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInspectFindingsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListInspectFindingsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListInspectFindingsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
#endif
inline void ListInspectFindingsResponse::set_next_page_token(const char* value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
inline void ListInspectFindingsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}
inline ::std::string* ListInspectFindingsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInspectFindingsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInspectFindingsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInspectFindingsResponse.next_page_token)
}

// -------------------------------------------------------------------

// InfoTypeDescription

// string name = 1;
inline void InfoTypeDescription::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoTypeDescription::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
  return name_.GetNoArena();
}
inline void InfoTypeDescription::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
#if LANG_CXX11
inline void InfoTypeDescription::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
#endif
inline void InfoTypeDescription::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
inline void InfoTypeDescription::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}
inline ::std::string* InfoTypeDescription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoTypeDescription::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoTypeDescription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InfoTypeDescription.name)
}

// string display_name = 2;
inline void InfoTypeDescription::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoTypeDescription::display_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
  return display_name_.GetNoArena();
}
inline void InfoTypeDescription::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
#if LANG_CXX11
inline void InfoTypeDescription::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
#endif
inline void InfoTypeDescription::set_display_name(const char* value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
inline void InfoTypeDescription::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}
inline ::std::string* InfoTypeDescription::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoTypeDescription::release_display_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoTypeDescription::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.InfoTypeDescription.display_name)
}

// repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 3;
inline int InfoTypeDescription::categories_size() const {
  return categories_.size();
}
inline void InfoTypeDescription::clear_categories() {
  categories_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::CategoryDescription& InfoTypeDescription::categories(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::CategoryDescription* InfoTypeDescription::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::CategoryDescription* InfoTypeDescription::add_categories() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >*
InfoTypeDescription::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return &categories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >&
InfoTypeDescription::categories() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.InfoTypeDescription.categories)
  return categories_;
}

// -------------------------------------------------------------------

// ListInfoTypesRequest

// string category = 1;
inline void ListInfoTypesRequest::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInfoTypesRequest::category() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
  return category_.GetNoArena();
}
inline void ListInfoTypesRequest::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
#if LANG_CXX11
inline void ListInfoTypesRequest::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
#endif
inline void ListInfoTypesRequest::set_category(const char* value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
inline void ListInfoTypesRequest::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}
inline ::std::string* ListInfoTypesRequest::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInfoTypesRequest::release_category() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInfoTypesRequest::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInfoTypesRequest.category)
}

// string language_code = 2;
inline void ListInfoTypesRequest::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListInfoTypesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
  return language_code_.GetNoArena();
}
inline void ListInfoTypesRequest::set_language_code(const ::std::string& value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
#if LANG_CXX11
inline void ListInfoTypesRequest::set_language_code(::std::string&& value) {
  
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
#endif
inline void ListInfoTypesRequest::set_language_code(const char* value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
inline void ListInfoTypesRequest::set_language_code(const char* value, size_t size) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}
inline ::std::string* ListInfoTypesRequest::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListInfoTypesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
  
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListInfoTypesRequest::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListInfoTypesRequest.language_code)
}

// -------------------------------------------------------------------

// ListInfoTypesResponse

// repeated .google.privacy.dlp.v2beta1.InfoTypeDescription info_types = 1;
inline int ListInfoTypesResponse::info_types_size() const {
  return info_types_.size();
}
inline void ListInfoTypesResponse::clear_info_types() {
  info_types_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::InfoTypeDescription& ListInfoTypesResponse::info_types(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::InfoTypeDescription* ListInfoTypesResponse::mutable_info_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::InfoTypeDescription* ListInfoTypesResponse::add_info_types() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeDescription >*
ListInfoTypesResponse::mutable_info_types() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return &info_types_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::InfoTypeDescription >&
ListInfoTypesResponse::info_types() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.ListInfoTypesResponse.info_types)
  return info_types_;
}

// -------------------------------------------------------------------

// CategoryDescription

// string name = 1;
inline void CategoryDescription::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CategoryDescription::name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CategoryDescription.name)
  return name_.GetNoArena();
}
inline void CategoryDescription::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
#if LANG_CXX11
inline void CategoryDescription::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
#endif
inline void CategoryDescription::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
inline void CategoryDescription::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.CategoryDescription.name)
}
inline ::std::string* CategoryDescription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CategoryDescription.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CategoryDescription::release_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CategoryDescription.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CategoryDescription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CategoryDescription.name)
}

// string display_name = 2;
inline void CategoryDescription::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CategoryDescription::display_name() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
  return display_name_.GetNoArena();
}
inline void CategoryDescription::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
#if LANG_CXX11
inline void CategoryDescription::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
#endif
inline void CategoryDescription::set_display_name(const char* value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
inline void CategoryDescription::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}
inline ::std::string* CategoryDescription::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CategoryDescription::release_display_name() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CategoryDescription::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.CategoryDescription.display_name)
}

// -------------------------------------------------------------------

// ListRootCategoriesRequest

// string language_code = 1;
inline void ListRootCategoriesRequest::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListRootCategoriesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
  return language_code_.GetNoArena();
}
inline void ListRootCategoriesRequest::set_language_code(const ::std::string& value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
#if LANG_CXX11
inline void ListRootCategoriesRequest::set_language_code(::std::string&& value) {
  
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
#endif
inline void ListRootCategoriesRequest::set_language_code(const char* value) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
inline void ListRootCategoriesRequest::set_language_code(const char* value, size_t size) {
  
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}
inline ::std::string* ListRootCategoriesRequest::mutable_language_code() {
  
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListRootCategoriesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
  
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListRootCategoriesRequest::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    
  } else {
    
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2beta1.ListRootCategoriesRequest.language_code)
}

// -------------------------------------------------------------------

// ListRootCategoriesResponse

// repeated .google.privacy.dlp.v2beta1.CategoryDescription categories = 1;
inline int ListRootCategoriesResponse::categories_size() const {
  return categories_.size();
}
inline void ListRootCategoriesResponse::clear_categories() {
  categories_.Clear();
}
inline const ::google::privacy::dlp::v2beta1::CategoryDescription& ListRootCategoriesResponse::categories(int index) const {
  // @@protoc_insertion_point(field_get:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_.Get(index);
}
inline ::google::privacy::dlp::v2beta1::CategoryDescription* ListRootCategoriesResponse::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_.Mutable(index);
}
inline ::google::privacy::dlp::v2beta1::CategoryDescription* ListRootCategoriesResponse::add_categories() {
  // @@protoc_insertion_point(field_add:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >*
ListRootCategoriesResponse::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return &categories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::privacy::dlp::v2beta1::CategoryDescription >&
ListRootCategoriesResponse::categories() const {
  // @@protoc_insertion_point(field_list:google.privacy.dlp.v2beta1.ListRootCategoriesResponse.categories)
  return categories_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v2beta1
}  // namespace dlp
}  // namespace privacy
}  // namespace google

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::privacy::dlp::v2beta1::Likelihood> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::privacy::dlp::v2beta1::Likelihood>() {
  return ::google::privacy::dlp::v2beta1::Likelihood_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto__INCLUDED
